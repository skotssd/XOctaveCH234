# doc-cache created by Octave 7.3.0
# name: cache
# type: cell
# rows: 3
# columns: 173
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
betacdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 771
 -- statistics: P = betacdf (X, A, B)
 -- statistics: P = betacdf (X, A, B, "upper")

     Beta cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     of the Beta distribution with shape parameters A and B.  The size
     of P is the common size of X, A, and B.  A scalar input functions
     as a constant matrix of the same size as the other inputs.

     ‘P = betacdf (X, A, B, "upper")’ computes the upper tail
     probability of the Beta distribution with parameters A and B, at
     the values in X.

     Further information about the Beta distribution can be found at
     <https://en.wikipedia.org/wiki/Beta_distribution>

     See also: betainv, betapdf, betarnd, betafit, betalike, betastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Beta cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
betainv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 567
 -- statistics: X = betainv (P, A, B)

     Inverse of the Beta distribution (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Beta distribution with shape parameters A and B.  The
     size of X is the common size of X, A, and B.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Beta distribution can be found at
     <https://en.wikipedia.org/wiki/Beta_distribution>

     See also: betacdf, betapdf, betarnd, betafit, betalike, betastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 40
Inverse of the Beta distribution (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
betapdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 568
 -- statistics: Y = betapdf (X, A, B)

     Beta probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Beta distribution with shape parameters A and B.  The
     size of Y is the common size of X, A, and B.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Beta distribution can be found at
     <https://en.wikipedia.org/wiki/Beta_distribution>

     See also: betacdf, betainv, betarnd, betafit, betalike, betastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 40
Beta probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
betarnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1080
 -- statistics: R = betarnd (A, B)
 -- statistics: R = betarnd (A, B, ROWS)
 -- statistics: R = betarnd (A, B, ROWS, COLS, ...)
 -- statistics: R = betarnd (A, B, [SZ])

     Random arrays from the Beta distribution.

     ‘R = betarnd (A, B)’ returns an array of random numbers chosen from
     the Beta distribution with shape parameters A and B.  The size of R
     is the common size of A and B.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘betarnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Beta distribution can be found at
     <https://en.wikipedia.org/wiki/Beta_distribution>

     See also: betacdf, betainv, betapdf, betafit, betalike, betastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 41
Random arrays from the Beta distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
binocdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 891
 -- statistics: P = binocdf (X, N, PS)
 -- statistics: P = binocdf (X, N, PS, "upper")

     Binomial cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the binomial distribution with parameters N and PS, where
     N is the number of trials and PS is the probability of success.
     The size of P is the common size of X, N, and PS.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     ‘P = binocdf (X, N, PS, "upper")’ computes the upper tail
     probability of the binomial distribution with parameters N and PS,
     at the values in X.

     Further information about the binomial distribution can be found at
     <https://en.wikipedia.org/wiki/Binomial_distribution>

     See also: binoinv, binopdf, binornd, binofit, binolike, binostat,
     binotest.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Binomial cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
binoinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 690
 -- statistics: X = binoinv (P, N, PS)

     Inverse of the Binomial cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the binomial distribution with parameters N and PS, where N
     is the number of trials and PS is the probability of success.  The
     size of X is the common size of P, N, and PS.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the binomial distribution can be found at
     <https://en.wikipedia.org/wiki/Binomial_distribution>

     See also: binocdf, binopdf, binornd, binofit, binolike, binostat,
     binotest.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 64
Inverse of the Binomial cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
binopdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 905
 -- statistics: Y = binopdf (X, N, PS)

     Binomial probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the binomial distribution with parameters N and PS, where
     N is the number of trials and PS is the probability of success.
     The size of Y is the common size of X, N, and PS.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Matlab incompatibility: Octave’s ‘binopdf’ does not allow complex
     input values.  Matlab 2021b returns values for complex inputs
     despite the documentation indicates integer and real value inputs
     are required.

     Further information about the binomial distribution can be found at
     <https://en.wikipedia.org/wiki/Binomial_distribution>

     See also: binocdf, binoinv, binornd, binofit, binolike, binostat,
     binotest.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Binomial probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
binornd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1180
 -- statistics: R = binornd (N, PS)
 -- statistics: R = binornd (N, PS, ROWS)
 -- statistics: R = binornd (N, PS, ROWS, COLS, ...)
 -- statistics: R = binornd (N, PS, [SZ])

     Random arrays from the Binomial distribution.

     ‘R = binornd (N, PS)’ returns a matrix of random samples from the
     binomial distribution with parameters N and PS, where N is the
     number of trials and PS is the probability of success.  The size of
     R is the common size of N and PS.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘binornd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the binomial distribution can be found at
     <https://en.wikipedia.org/wiki/Binomial_distribution>

     See also: binocdf, binoinv, binopdf, binofit, binolike, binostat,
     binotest.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Random arrays from the Binomial distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
bisacdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 916
 -- statistics: P = bisacdf (X, BETA, GAMMA)
 -- statistics: P = bisacdf (X, BETA, GAMMA, "upper")

     Birnbaum-Saunders cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Birnbaum-Saunders distribution with scale parameter
     BETA and shape parameter GAMMA.  The size of P is the common size
     of X, BETA and GAMMA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     ‘P = bisacdf (X, BETA, GAMMA, "upper")’ computes the upper tail
     probability of the Birnbaum-Saunders distribution with parameters
     BETA and GAMMA, at the values in X.

     Further information about the Birnbaum-Saunders distribution can be
     found at
     <https://en.wikipedia.org/wiki/Birnbaum%E2%80%93Saunders_distribution>

     See also: bisainv, bisapdf, bisarnd, bisafit, bisalike, bisastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 57
Birnbaum-Saunders cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
bisainv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 693
 -- statistics: X = bisainv (P, BETA, GAMMA)

     Inverse of the Birnbaum-Saunders cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Birnbaum-Saunders distribution with scale parameter
     BETA and shape parameter GAMMA.  The size of X is the common size
     of P, BETA, and GAMMA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     Further information about the Birnbaum-Saunders distribution can be
     found at
     <https://en.wikipedia.org/wiki/Birnbaum%E2%80%93Saunders_distribution>

     See also: bisainv, bisapdf, bisarnd, bisafit, bisalike, bisastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 73
Inverse of the Birnbaum-Saunders cumulative distribution function
(iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
bisapdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 669
 -- statistics: Y = bisapdf (X, BETA, GAMMA)

     Birnbaum-Saunders probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Birnbaum-Saunders distribution with scale parameter
     BETA and shape parameter GAMMA.  The size of Y is the common size
     of X, BETA, and GAMMA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     Further information about the Birnbaum-Saunders distribution can be
     found at
     <https://en.wikipedia.org/wiki/Birnbaum%E2%80%93Saunders_distribution>

     See also: bisacdf, bisapdf, bisarnd, bisafit, bisalike, bisastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Birnbaum-Saunders probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
bisarnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1214
 -- statistics: R = bisarnd (BETA, GAMMA)
 -- statistics: R = bisarnd (BETA, GAMMA, ROWS)
 -- statistics: R = bisarnd (BETA, GAMMA, ROWS, COLS, ...)
 -- statistics: R = bisarnd (BETA, GAMMA, [SZ])

     Random arrays from the Birnbaum-Saunders distribution.

     ‘R = bisarnd (BETA, GAMMA)’ returns an array of random numbers
     chosen from the Birnbaum-Saunders distribution with scale parameter
     BETA and shape parameter GAMMA.  The size of R is the common size
     of BETA and GAMMA.  A scalar input functions as a constant matrix
     of the same size as the other inputs.

     When called with a single size argument, ‘bisarnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Birnbaum-Saunders distribution can be
     found at
     <https://en.wikipedia.org/wiki/Birnbaum%E2%80%93Saunders_distribution>

     See also: bisacdf, bisainv, bisapdf, bisafit, bisalike, bisastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Random arrays from the Birnbaum-Saunders distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
burrcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 909
 -- statistics: P = burrcdf (X, LAMBDA, C, K)
 -- statistics: P = burrcdf (X, LAMBDA, C, K, "upper")

     Burr type XII cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Burr type XII distribution with scale parameter
     LAMBDA, first shape parameter C, and second shape parameter K.  The
     size of P is the common size of X, LAMBDA, C, and K.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     ‘P = burrcdf (X, BETA, GAMMA, "upper")’ computes the upper tail
     probability of the Birnbaum-Saunders distribution with parameters
     BETA and GAMMA, at the values in X.

     Further information about the Burr distribution can be found at
     <https://en.wikipedia.org/wiki/Burr_distribution>

     See also: burrinv, burrpdf, burrrnd, burrfit, burrlike, burrstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Burr type XII cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
burrinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 684
 -- statistics: X = burrinv (P, LAMBDA, C, K)

     Inverse of the Burr type XII cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Burr type XII distribution with scale parameter LAMBDA,
     first shape parameter C, and second shape parameter K.  The size of
     X is the common size of P, LAMBDA, C, and K.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Burr distribution can be found at
     <https://en.wikipedia.org/wiki/Burr_distribution>

     See also: burrcdf, burrpdf, burrrnd, burrfit, burrlike, burrstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
Inverse of the Burr type XII cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
burrpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 665
 -- statistics: Y = burrpdf (X, LAMBDA, C, K)

     Burr type XII probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Burr type XII distribution with with scale parameter
     LAMBDA, first shape parameter C, and second shape parameter K.  The
     size of Y is the common size of X, LAMBDA, C, and K.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Burr distribution can be found at
     <https://en.wikipedia.org/wiki/Burr_distribution>

     See also: burrcdf, burrinv, burrrnd, burrfit, burrlike, burrstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Burr type XII probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
burrrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1221
 -- statistics: R = burrrnd (LAMBDA, C, K)
 -- statistics: R = burrrnd (LAMBDA, C, K, ROWS)
 -- statistics: R = burrrnd (LAMBDA, C, K, ROWS, COLS, ...)
 -- statistics: R = burrrnd (LAMBDA, C, K, [SZ])

     Random arrays from the Burr type XII distribution.

     ‘R = burrrnd (LAMBDA, C, K)’ returns an array of random numbers
     chosen from the Burr type XII distribution with scale parameter
     LAMBDA, first shape parameter C, and second shape parameterC, and
     K.  The size of R is the common size of LAMBDA, C, and K.  LAMBDA
     scalar input functions as a constant matrix of the same size as the
     other inputs.

     When called with a single size argument, ‘burrrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Burr distribution can be found at
     <https://en.wikipedia.org/wiki/Burr_distribution>

     See also: burrcdf, burrinv, burrpdf, burrfit, burrlike, burrstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Random arrays from the Burr type XII distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
bvncdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 721
 -- statistics: P = bvncdf (X, MU, SIGMA)
 -- statistics: P = bvncdf (X, [], SIGMA)

     Bivariate normal cumulative distribution function (CDF).

     ‘P = bvncdf (X, MU, SIGMA)’ will compute the bivariate normal
     cumulative distribution function of X given a mean parameter MU and
     a scale parameter SIGMA.

        • X must be an Nx2 matrix with each variable as a column vector.
        • MU can be either a scalar (common mean) or a two-element row
          vector (each element corresponds to a variable).  If empty, a
          zero mean is assumed.
        • SIGMA can be a scalar (common variance) or a 2x2 covariance
          matrix, which must be positive definite.

     See also: mvncdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 56
Bivariate normal cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
bvtcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 597
 -- statistics: P = bvtcdf (X, RHO, DF)
 -- statistics: P = bvtcdf (X, RHO, DF, TOL)

     Bivariate Student’s t cumulative distribution function (CDF).

     ‘P = bvtcdf (X, RHO, DF)’ will compute the bivariate student’s t
     cumulative distribution function of X, which must be an Nx2 matrix,
     given a correlation coefficient RHO, which must be a scalar, and DF
     degrees of freedom, which can be a scalar or a vector of positive
     numbers commensurate with X.

     TOL is the tolerance for numerical integration and by default ‘TOL
     = 1e-8’.

     See also: mvtcdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Bivariate Student’s t cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
cauchycdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 823
 -- statistics: P = cauchycdf (X, X0, GAMMA)
 -- statistics: P = cauchycdf (X, X0, GAMMA, "upper")

     Cauchy cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Cauchy distribution with location parameter X0 and
     scale parameter GAMMA.  The size of P is the common size of X, X0,
     and GAMMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     ‘P = cauchycdf (X, X0, GAMMA, "upper")’ computes the upper tail
     probability of the Cauchy distribution with parameters X0 and
     GAMMA, at the values in X.

     Further information about the Cauchy distribution can be found at
     <https://en.wikipedia.org/wiki/Cauchy_distribution>

     See also: cauchyinv, cauchypdf, cauchyrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Cauchy cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
cauchyinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 607
 -- statistics: X = cauchyinv (P, X0, GAMMA)

     Inverse of the Cauchy cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Cauchy distribution with location parameter X0 and
     scale parameter GAMMA.  The size of X is the common size of P, X0,
     and GAMMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Further information about the Cauchy distribution can be found at
     <https://en.wikipedia.org/wiki/Cauchy_distribution>

     See also: cauchycdf, cauchypdf, cauchyrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 62
Inverse of the Cauchy cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
cauchypdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 588
 -- statistics: Y = cauchypdf (X, X0, GAMMA)

     Cauchy probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Cauchy distribution with location parameter X0 and
     scale parameter GAMMA.  The size of Y is the common size of X, X0,
     and GAMMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Further information about the Cauchy distribution can be found at
     <https://en.wikipedia.org/wiki/Cauchy_distribution>

     See also: cauchycdf, cauchypdf, cauchyrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Cauchy probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
cauchyrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1135
 -- statistics: R = cauchyrnd (X0, GAMMA)
 -- statistics: R = cauchyrnd (X0, GAMMA, ROWS)
 -- statistics: R = cauchyrnd (X0, GAMMA, ROWS, COLS, ...)
 -- statistics: R = cauchyrnd (X0, GAMMA, [SZ])

     Random arrays from the Cauchy distribution.

     ‘R = cauchyrnd (X0, GAMMA)’ returns an array of random numbers
     chosen from the Cauchy distribution with location parameter X0 and
     scale parameter GAMMA.  The size of R is the common size of X0 and
     GAMMA.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     When called with a single size argument, ‘cauchyrnd’ returns a
     square matrix with the dimension specified.  When called with more
     than one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Cauchy distribution can be found at
     <https://en.wikipedia.org/wiki/Cauchy_distribution>

     See also: cauchycdf, cauchyinv, cauchypdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Random arrays from the Cauchy distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
chi2cdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 921
 -- statistics: P = chi2cdf (X, DF)
 -- statistics: P = chi2cdf (X, DF, "upper")

     Chi-squared cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the chi-squared distribution with DF degrees of freedom.
     The chi-squared density function with DF degrees of freedom is the
     same as a gamma density function with parameters DF/2 and 2.

     The size of P is the common size of X and DF.  A scalar input
     functions as a constant matrix of the same size as the other input.

     ‘P = chi2cdf (X, DF, "upper")’ computes the upper tail probability
     of the chi-squared distribution with DF degrees of freedom, at the
     values in X.

     Further information about the chi-squared distribution can be found
     at <https://en.wikipedia.org/wiki/Chi-squared_distribution>

     See also: chi2inv, chi2pdf, chi2rnd, chi2stat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
Chi-squared cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
chi2inv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 587
 -- statistics: X = chi2inv (P, DF)

     Inverse of the chi-squared cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the chi-squared distribution with DF degrees of freedom.
     The size of X is the common size of P and DF.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the chi-squared distribution can be found
     at <https://en.wikipedia.org/wiki/Chi-squared_distribution>

     See also: chi2cdf, chi2pdf, chi2rnd, chi2stat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
Inverse of the chi-squared cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
chi2pdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 568
 -- statistics: Y = chi2pdf (X, DF)

     Chi-squared probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the chi-squared distribution with DF degrees of freedom.
     The size of Y is the common size of X and DF.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the chi-squared distribution can be found
     at <https://en.wikipedia.org/wiki/Chi-squared_distribution>

     See also: chi2cdf, chi2pdf, chi2rnd, chi2stat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Chi-squared probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
chi2rnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 974
 -- statistics: R = chi2rnd (DF)
 -- statistics: R = chi2rnd (DF, ROWS)
 -- statistics: R = chi2rnd (DF, ROWS, COLS, ...)
 -- statistics: R = chi2rnd (DF, [SZ])

     Random arrays from the chi-squared distribution.

     ‘R = chi2rnd (DF)’ returns an array of random numbers chosen from
     the chi-squared distribution with DF degrees of freedom.  The size
     of R is the size of DF.

     When called with a single size argument, ‘chi2rnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the chi-squared distribution can be found
     at <https://en.wikipedia.org/wiki/Chi-squared_distribution>

     See also: chi2cdf, chi2inv, chi2pdf, chi2stat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Random arrays from the chi-squared distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
copulacdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2258
 -- statistics: P = copulacdf (FAMILY, X, THETA)
 -- statistics: P = copulacdf ('t', X, THETA, DF)

     Copula family cumulative distribution functions (CDF).

     Arguments
     ---------

        • FAMILY is the copula family name.  Currently, FAMILY can be
          ‘'Gaussian'’ for the Gaussian family, ‘'t'’ for the Student’s
          t family, ‘'Clayton'’ for the Clayton family, ‘'Gumbel'’ for
          the Gumbel-Hougaard family, ‘'Frank'’ for the Frank family,
          ‘'AMH'’ for the Ali-Mikhail-Haq family, or ‘'FGM'’ for the
          Farlie-Gumbel-Morgenstern family.

        • X is the support where each row corresponds to an observation.

        • THETA is the parameter of the copula.  For the Gaussian and
          Student’s t copula, THETA must be a correlation matrix.  For
          bivariate copulas THETA can also be a correlation coefficient.
          For the Clayton family, the Gumbel-Hougaard family, the Frank
          family, and the Ali-Mikhail-Haq family, THETA must be a vector
          with the same number of elements as observations in X or be
          scalar.  For the Farlie-Gumbel-Morgenstern family, THETA must
          be a matrix of coefficients for the Farlie-Gumbel-Morgenstern
          polynomial where each row corresponds to one set of
          coefficients for an observation in X.  A single row is
          expanded.  The coefficients are in binary order.

        • DF is the degrees of freedom for the Student’s t family.  DF
          must be a vector with the same number of elements as
          observations in X or be scalar.

     Return values
     -------------

        • P is the cumulative distribution of the copula at each row of
          X and corresponding parameter THETA.

     Examples
     --------

          x = [0.2:0.2:0.6; 0.2:0.2:0.6];
          theta = [1; 2];
          p = copulacdf ("Clayton", x, theta)

          x = [0.2:0.2:0.6; 0.2:0.1:0.4];
          theta = [0.2, 0.1, 0.1, 0.05];
          p = copulacdf ("FGM", x, theta)

     References
     ----------

       1. Roger B. Nelsen.  ‘An Introduction to Copulas’.  Springer, New
          York, second edition, 2006.

     See also: copulapdf, copularnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Copula family cumulative distribution functions (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
copulapdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1568
 -- statistics: Y = copulapdf (FAMILY, X, THETA)

     Copula family probability density functions (PDF).

     Arguments
     ---------

        • FAMILY is the copula family name.  Currently, FAMILY can be
          ‘'Clayton'’ for the Clayton family, ‘'Gumbel'’ for the
          Gumbel-Hougaard family, ‘'Frank'’ for the Frank family, or
          ‘'AMH'’ for the Ali-Mikhail-Haq family.

        • X is the support where each row corresponds to an observation.

        • THETA is the parameter of the copula.  The elements of THETA
          must be greater than or equal to ‘-1’ for the Clayton family,
          greater than or equal to ‘1’ for the Gumbel-Hougaard family,
          arbitrary for the Frank family, and greater than or equal to
          ‘-1’ and lower than ‘1’ for the Ali-Mikhail-Haq family.
          Moreover, THETA must be non-negative for dimensions greater
          than ‘2’.  THETA must be a column vector with the same number
          of rows as X or be scalar.

     Return values
     -------------

        • Y is the probability density of the copula at each row of X
          and corresponding parameter THETA.

     Examples
     --------

          x = [0.2:0.2:0.6; 0.2:0.2:0.6];
          theta = [1; 2];
          y = copulapdf ("Clayton", x, theta)

          y = copulapdf ("Gumbel", x, 2)

     References
     ----------

       1. Roger B. Nelsen.  ‘An Introduction to Copulas’.  Springer, New
          York, second edition, 2006.

     See also: copulacdf, copularnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Copula family probability density functions (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
copularnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1935
 -- Function File: R = copularnd (FAMILY, THETA, N)
 -- Function File: R = copularnd (FAMILY, THETA, N, D)
 -- Function File: R = copularnd ('t', THETA, DF, N)

     Random arrays from the copula family distributions.

     Arguments
     ---------

        • FAMILY is the copula family name.  Currently, FAMILY can be
          ‘'Gaussian'’ for the Gaussian family, ‘'t'’ for the Student’s
          t family, or ‘'Clayton'’ for the Clayton family.

        • THETA is the parameter of the copula.  For the Gaussian and
          Student’s t copula, THETA must be a correlation matrix.  For
          bivariate copulas THETA can also be a correlation coefficient.
          For the Clayton family, THETA must be a vector with the same
          number of elements as samples to be generated or be scalar.

        • DF is the degrees of freedom for the Student’s t family.  DF
          must be a vector with the same number of elements as samples
          to be generated or be scalar.

        • N is the number of rows of the matrix to be generated.  N must
          be a non-negative integer and corresponds to the number of
          samples to be generated.

        • D is the number of columns of the matrix to be generated.  D
          must be a positive integer and corresponds to the dimension of
          the copula.

     Return values
     -------------

        • R is a matrix of random samples from the copula with N samples
          of distribution dimension D.

     Examples
     --------

          theta = 0.5;
          r = copularnd ("Gaussian", theta);

          theta = 0.5;
          df = 2;
          r = copularnd ("t", theta, df);

          theta = 0.5;
          n = 2;
          r = copularnd ("Clayton", theta, n);

     References
     ----------

       1. Roger B. Nelsen.  ‘An Introduction to Copulas’.  Springer, New
          York, second edition, 2006.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
Random arrays from the copula family distributions.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
evcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2041
 -- statistics: P = evcdf (X)
 -- statistics: P = evcdf (X, MU)
 -- statistics: P = evcdf (X, MU, SIGMA)
 -- statistics: P = evcdf (..., "upper")
 -- statistics: [P, PLO, PUP] = evcdf (X, MU, SIGMA, PCOV)
 -- statistics: [P, PLO, PUP] = evcdf (X, MU, SIGMA, PCOV, ALPHA)
 -- statistics: [P, PLO, PUP] = evcdf (..., "upper")

     Extreme value cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the extreme value distribution (also known as the Gumbel
     or the type I generalized extreme value distribution) at the values
     in X with location parameter MU and scale parameter SIGMA.  The
     size of P is the common size of X, MU and SIGMA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Default values are MU = 0 and SIGMA = 1.

     When called with three output arguments, i.e.  [P, PLO, PUP],
     ‘evcdf’ computes the confidence bounds for P when the input
     parameters MU and SIGMA are estimates.  In such case, PCOV, a 2x2
     matrix containing the covariance matrix of the estimated
     parameters, is necessary.  Optionally, ALPHA, which has a default
     value of 0.05, specifies the 100 * (1 - ALPHA) percent confidence
     bounds.  PLO and PUP are arrays of the same size as P containing
     the lower and upper confidence bounds.

     ‘[...] = evcdf (..., "upper")’ computes the upper tail probability
     of the extreme value distribution with parameters X0 and GAMMA, at
     the values in X.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling minima.  For
     modeling maxima, use the alternative Gumbel CDF, ‘gumbelcdf’.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: evinv, evpdf, evrnd, evfit, evlike, evstat, gumbelcdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Extreme value cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
evinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1769
 -- statistics: X = evinv (P)
 -- statistics: X = evinv (P, MU)
 -- statistics: X = evinv (P, MU, SIGMA)
 -- statistics: [X, XLO, XUP] = evinv (P, MU, SIGMA, PCOV)
 -- statistics: [X, XLO, XUP] = evinv (P, MU, SIGMA, PCOV, ALPHA)

     Inverse of the extreme value cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the extreme value distribution (also known as the Gumbel or
     the type I generalized extreme value distribution) with location
     parameter MU and scale parameter SIGMA.  The size of X is the
     common size of P, MU and SIGMA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Default values are MU = 0 and SIGMA = 1.

     When called with three output arguments, i.e.  [X, XLO, XUP],
     ‘evinv’ computes the confidence bounds for X when the input
     parameters MU and SIGMA are estimates.  In such case, PCOV, a 2x2
     matrix containing the covariance matrix of the estimated
     parameters, is necessary.  Optionally, ALPHA, which has a default
     value of 0.05, specifies the 100 * (1 - ALPHA) percent confidence
     bounds.  XLO and XUP are arrays of the same size as X containing
     the lower and upper confidence bounds.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling minima.  For
     modeling maxima, use the alternative Gumbel iCDF, ‘gumbelinv’.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: evcdf, evpdf, evrnd, evfit, evlike, evstat, gumbelinv.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
Inverse of the extreme value cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
evpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1094
 -- statistics: Y = evpdf (X)
 -- statistics: Y = evpdf (X, MU)
 -- statistics: Y = evpdf (X, MU, SIGMA)

     Extreme value probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the extreme value distribution (also known as the Gumbel
     or the type I generalized extreme value distribution) with location
     parameter MU and scale parameter SIGMA.  The size of Y is the
     common size of X, MU and SIGMA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Default values are MU = 0 and SIGMA = 1.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling minima.  For
     modeling maxima, use the alternative Gumbel iCDF, ‘gumbelinv’.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: evcdf, evinv, evrnd, evfit, evlike, evstat, gumbelpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Extreme value probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
evrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1500
 -- statistics: R = evrnd (MU, SIGMA)
 -- statistics: R = evrnd (MU, SIGMA, ROWS)
 -- statistics: R = evrnd (MU, SIGMA, ROWS, COLS, ...)
 -- statistics: R = evrnd (MU, SIGMA, [SZ])

     Random arrays from the extreme value distribution.

     ‘R = evrnd (MU, SIGMA)’ returns an array of random numbers chosen
     from the extreme value distribution (also known as the Gumbel or
     the type I generalized extreme value distribution) with location
     parameter MU and scale parameter SIGMA.  The size of R is the
     common size of MU and SIGMA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘evrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling minima.  For
     modeling maxima, use the alternative Gumbel iCDF, ‘gumbelinv’.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: evcdf, evinv, evpdf, evfit, evlike, evstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Random arrays from the extreme value distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
expcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1820
 -- statistics: P = expcdf (X)
 -- statistics: P = expcdf (X, MU)
 -- statistics: P = expcdf (..., "upper")
 -- statistics: [P, PLO, PUP] = expcdf (X, MU, PCOV)
 -- statistics: [P, PLO, PUP] = expcdf (X, MU, PCOV, ALPHA)
 -- statistics: [P, PLO, PUP] = expcdf (..., "upper")

     Exponential cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the exponential distribution with mean parameter MU.  The
     size of P is the common size of X and MU.  A scalar input functions
     as a constant matrix of the same size as the other inputs.

     Default value is MU = 1.

     A common alternative parameterization of the exponential
     distribution is to use the parameter λ defined as the mean number
     of events in an interval as opposed to the parameter μ, which is
     the mean wait time for an event to occur.  λ and μ are reciprocals,
     i.e.  μ = 1 / λ.

     When called with three output arguments, i.e.  [P, PLO, PUP],
     ‘expcdf’ computes the confidence bounds for P when the input
     parameter MU is an estimate.  In such case, PCOV, a scalar value
     with the variance of the estimated parameter MU, is necessary.
     Optionally, ALPHA, which has a default value of 0.05, specifies the
     100 * (1 - ALPHA) percent confidence bounds.  PLO and PUP are
     arrays of the same size as P containing the lower and upper
     confidence bounds.

     ‘[...] = expcdf (..., "upper")’ computes the upper tail probability
     of the exponential distribution with parameter MU, at the values in
     X.

     Further information about the exponential distribution can be found
     at <https://en.wikipedia.org/wiki/Exponential_distribution>

     See also: expinv, exppdf, exprnd, expfit, explike, expstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
Exponential cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
expinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1566
 -- statistics: X = expinv (P)
 -- statistics: X = expinv (P, MU)
 -- statistics: [X, XLO, XUP] = expinv (P, MU, PCOV)
 -- statistics: [X, XLO, XUP] = expinv (P, MU, PCOV, ALPHA)

     Inverse of the exponential cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the exponential distribution with mean MU.  The size of X
     is the common size of P and MU.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Default value is MU = 1.

     A common alternative parameterization of the exponential
     distribution is to use the parameter λ defined as the mean number
     of events in an interval as opposed to the parameter μ, which is
     the mean wait time for an event to occur.  λ and μ are reciprocals,
     i.e.  μ = 1 / λ.

     When called with three output arguments, i.e.  [X, XLO, XUP],
     ‘expinv’ computes the confidence bounds for X when the input
     parameter MU is an estimate.  In such case, PCOV, a scalar value
     with the variance of the estimated parameter MU, is necessary.
     Optionally, ALPHA, which has a default value of 0.05, specifies the
     100 * (1 - ALPHA) percent confidence bounds.  XLO and XUP are
     arrays of the same size as X containing the lower and upper
     confidence bounds.

     Further information about the exponential distribution can be found
     at <https://en.wikipedia.org/wiki/Exponential_distribution>

     See also: expcdf, exppdf, exprnd, expfit, explike, expstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
Inverse of the exponential cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
exppdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 940
 -- statistics: Y = exppdf (X)
 -- statistics: Y = exppdf (X, MU)

     Exponential probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the exponential distribution with mean parameter MU.  The
     size of Y is the common size of X and MU.  A scalar input functions
     as a constant matrix of the same size as the other inputs.

     Default value for MU = 1.

     A common alternative parameterization of the exponential
     distribution is to use the parameter λ defined as the mean number
     of events in an interval as opposed to the parameter μ, which is
     the mean wait time for an event to occur.  λ and μ are reciprocals,
     i.e.  μ = 1 / λ.

     Further information about the exponential distribution can be found
     at <https://en.wikipedia.org/wiki/Exponential_distribution>

     See also: expcdf, expinv, exprnd, expfit, explike, expstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Exponential probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
exprnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1282
 -- statistics: R = exprnd (MU)
 -- statistics: R = exprnd (MU, ROWS)
 -- statistics: R = exprnd (MU, ROWS, COLS, ...)
 -- statistics: R = exprnd (MU, [SZ])

     Random arrays from the exponential distribution.

     ‘R = exprnd (MU)’ returns an array of random numbers chosen from
     the exponential distribution with mean parameter MU.  The size of R
     is the size of MU.

     When called with a single size argument, ‘exprnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     A common alternative parameterization of the exponential
     distribution is to use the parameter λ defined as the mean number
     of events in an interval as opposed to the parameter μ, which is
     the mean wait time for an event to occur.  λ and μ are reciprocals,
     i.e.  μ = 1 / λ.

     Further information about the exponential distribution can be found
     at <https://en.wikipedia.org/wiki/Exponential_distribution>

     See also: expcdf, expinv, exppdf, expfit, explike, expstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Random arrays from the exponential distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
fcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 760
 -- statistics: P = fcdf (X, DF1, DF2)
 -- statistics: P = fcdf (X, DF1, DF2, "upper")

     F-cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the F-distribution with DF1 and DF2 degrees of freedom.
     The size of P is the common size of X, DF1, and DF2.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     ‘P = fcdf (X, DF1, DF2, "upper")’ computes the upper tail
     probability of the F-distribution with DF1 and DF2 degrees of
     freedom, at the values in X.

     Further information about the F-distribution can be found at
     <https://en.wikipedia.org/wiki/F-distribution>

     See also: finv, fpdf, frnd, fstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 41
F-cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
finv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 554
 -- statistics: X = finv (P, DF1, DF2)

     Inverse of the F-cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the F-distribution with DF1 and DF2 degrees of freedom.
     The size of X is the common size of P, DF1, and DF2.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     Further information about the F-distribution can be found at
     <https://en.wikipedia.org/wiki/F-distribution>

     See also: fcdf, fpdf, frnd, fstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 57
Inverse of the F-cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
fpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 535
 -- statistics: Y = fpdf (X, DF1, DF2)

     F-probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the F-distribution with DF1 and DF2 degrees of freedom.
     The size of Y is the common size of X, DF1, and DF2.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     Further information about the F-distribution can be found at
     <https://en.wikipedia.org/wiki/F-distribution>

     See also: fcdf, finv, frnd, fstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 37
F-probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
frnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1054
 -- statistics: R = frnd (DF1, DF2)
 -- statistics: R = frnd (DF1, DF2, ROWS)
 -- statistics: R = frnd (DF1, DF2, ROWS, COLS, ...)
 -- statistics: R = frnd (DF1, DF2, [SZ])

     Random arrays from the F-distribution.

     ‘R = frnd (DF1, DF2)’ returns an array of random numbers chosen
     from the F-distribution with DF1 and DF2 degrees of freedom.  The
     size of R is the common size of DF1 and DF2.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     When called with a single size argument, ‘frnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the F-distribution can be found at
     <https://en.wikipedia.org/wiki/F-distribution>

     See also: fcdf, finv, fpdf, fstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 38
Random arrays from the F-distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gamcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2007
 -- statistics: P = gamcdf (X, A)
 -- statistics: P = gamcdf (X, A, B)
 -- statistics: P = gamcdf (..., "upper")
 -- statistics: [P, PLO, PUP] = gamcdf (X, A, B, PCOV)
 -- statistics: [P, PLO, PUP] = gamcdf (X, A, B, PCOV, ALPHA)
 -- statistics: [P, PLO, PUP] = gamcdf (..., "upper")

     Gamma cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Gamma distribution with shape parameter A and scale
     parameter B.  When called with only one parameter, then B defaults
     to 1.  The size of P is the common size of X, A, and B.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     When called with three output arguments, i.e.  [P, PLO, PUP],
     ‘gamcdf’ computes the confidence bounds for P when the input
     parameters A and B are estimates.  In such case, PCOV, a 2x2 matrix
     containing the covariance matrix of the estimated parameters, is
     necessary.  Optionally, ALPHA, which has a default value of 0.05,
     specifies the 100 * (1 - ALPHA) percent confidence bounds.  PLO and
     PUP are arrays of the same size as P containing the lower and upper
     confidence bounds.

     ‘[...] = gamcdf (..., "upper")’ computes the upper tail probability
     of the Gamma distribution with parameters A and B, at the values in
     X.

     OCTAVE/MATLAB use the alternative parameterization given by the
     pair α, β, i.e.  shape A and scale B.  In Wikipedia, the two common
     parameterizations use the pairs k, θ, as shape and scale, and α, β,
     as shape and rate, respectively.  The parameter names A and B used
     here (for MATLAB compatibility) correspond to the parameter
     notation k, θ instead of the α, β as reported in Wikipedia.

     Further information about the Gamma distribution can be found at
     <https://en.wikipedia.org/wiki/Gamma_distribution>

     See also: gaminv, gampdf, gamrnd, gamfit, gamlike, gamstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Gamma cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gaminv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1025
 -- statistics: X = gaminv (P, A, B)

     Inverse of the Gamma cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Gamma distribution with shape parameter A and scale
     parameter B.  The size of X is the common size of P, A, and B.  A
     scalar input functions as a constant matrix of the same size as the
     other inputs.

     OCTAVE/MATLAB use the alternative parameterization given by the
     pair α, β, i.e.  shape A and scale B.  In Wikipedia, the two common
     parameterizations use the pairs k, θ, as shape and scale, and α, β,
     as shape and rate, respectively.  The parameter names A and B used
     here (for MATLAB compatibility) correspond to the parameter
     notation k, θ instead of the α, β as reported in Wikipedia.

     Further information about the Gamma distribution can be found at
     <https://en.wikipedia.org/wiki/Gamma_distribution>

     See also: gamcdf, gampdf, gamrnd, gamfit, gamlike, gamstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 61
Inverse of the Gamma cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gampdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1005
 -- statistics: Y = gampdf (X, A, B)

     Gamma probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Gamma distribution with shape parameter A and scale
     parameter B.  The size of Y is the common size of X, A and B.  A
     scalar input functions as a constant matrix of the same size as the
     other inputs.

     OCTAVE/MATLAB use the alternative parameterization given by the
     pair α, β, i.e.  shape A and scale B.  In Wikipedia, the two common
     parameterizations use the pairs k, θ, as shape and scale, and α, β,
     as shape and rate, respectively.  The parameter names A and B used
     here (for MATLAB compatibility) correspond to the parameter
     notation k, θ instead of the α, β as reported in Wikipedia.

     Further information about the Gamma distribution can be found at
     <https://en.wikipedia.org/wiki/Gamma_distribution>

     See also: gamcdf, gaminv, gamrnd, gamfit, gamlike, gamstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 41
Gamma probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gamrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1518
 -- statistics: R = gamrnd (A, B)
 -- statistics: R = gamrnd (A, B, ROWS)
 -- statistics: R = gamrnd (A, B, ROWS, COLS, ...)
 -- statistics: R = gamrnd (A, B, [SZ])

     Random arrays from the Gamma distribution.

     ‘R = gamrnd (A, B)’ returns an array of random numbers chosen from
     the Gamma distribution with shape parameter A and scale parameter
     B.  The size of R is the common size of A and B.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     When called with a single size argument, ‘gamrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     OCTAVE/MATLAB use the alternative parameterization given by the
     pair α, β, i.e.  shape A and scale B.  In Wikipedia, the two common
     parameterizations use the pairs k, θ, as shape and scale, and α, β,
     as shape and rate, respectively.  The parameter names A and B used
     here (for MATLAB compatibility) correspond to the parameter
     notation k, θ instead of the α, β as reported in Wikipedia.

     Further information about the Gamma distribution can be found at
     <https://en.wikipedia.org/wiki/Gamma_distribution>

     See also: gamcdf, gaminv, gampdf, gamfit, gamlike, gamstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Random arrays from the Gamma distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
geocdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 924
 -- statistics: P = geocdf (X, PS)
 -- statistics: P = geocdf (X, PS, "upper")

     Geometric cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the geometric distribution with probability of success
     parameter PS.  The size of P is the common size of X and PS.  A
     scalar input functions as a constant matrix of the same size as the
     other inputs.

     ‘P = geocdf (X, PS, "upper")’ computes the upper tail probability
     of the geometric distribution with parameter PS, at the values in
     X.

     The geometric distribution models the number of failures (X) of a
     Bernoulli trial with probability PS before the first success.

     Further information about the geometric distribution can be found
     at <https://en.wikipedia.org/wiki/Geometric_distribution>

     See also: geoinv, geopdf, geornd, geofit, geostat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Geometric cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
geoinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 736
 -- statistics: X = geoinv (P, PS)

     Inverse of the geometric cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the geometric distribution with probability of success
     parameter PS.  The size of X is the common size of P and PS.  A
     scalar input functions as a constant matrix of the same size as the
     other inputs.

     The geometric distribution models the number of failures (P) of a
     Bernoulli trial with probability PS before the first success.

     Further information about the geometric distribution can be found
     at <https://en.wikipedia.org/wiki/Geometric_distribution>

     See also: geocdf, geopdf, geornd, geofit, geostat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 65
Inverse of the geometric cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
geopdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 717
 -- statistics: Y = geopdf (X, PS)

     Geometric probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the geometric distribution with probability of success
     parameter PS.  The size of Y is the common size of X and PS.  A
     scalar input functions as a constant matrix of the same size as the
     other inputs.

     The geometric distribution models the number of failures (X) of a
     Bernoulli trial with probability PS before the first success.

     Further information about the geometric distribution can be found
     at <https://en.wikipedia.org/wiki/Geometric_distribution>

     See also: geocdf, geoinv, geornd, geofit, geostat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Geometric probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
geornd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1125
 -- statistics: R = geornd (PS)
 -- statistics: R = geornd (PS, ROWS)
 -- statistics: R = geornd (PS, ROWS, COLS, ...)
 -- statistics: R = geornd (PS, [SZ])

     Random arrays from the geometric distribution.

     ‘R = geornd (PS)’ returns an array of random numbers chosen from
     the Birnbaum-Saunders distribution with probability of success
     parameter PS.  The size of R is the size of PS.

     When called with a single size argument, ‘geornd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     The geometric distribution models the number of failures (X) of a
     Bernoulli trial with probability PS before the first success.

     Further information about the geometric distribution can be found
     at <https://en.wikipedia.org/wiki/Geometric_distribution>

     See also: geocdf, geoinv, geopdf, geofit, geostat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Random arrays from the geometric distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gevcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1678
 -- statistics: P = gevcdf (X, K, SIGMA, MU)
 -- statistics: P = gevcdf (X, K, SIGMA, MU, "upper")

     Generalized extreme value (GEV) cumulative distribution function
     (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the GEV distribution with shape parameter K, scale
     parameter SIGMA, and location parameter MU.  The size of P is the
     common size of X, K, SIGMA, and MU.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     ‘[...] = gevcdf (X, K, SIGMA, MU, "upper")’ computes the upper tail
     probability of the GEV distribution with parameters K, SIGMA, and
     MU, at the values in X.

     When K < 0, the GEV is the type III extreme value distribution.
     When K > 0, the GEV distribution is the type II, or Frechet,
     extreme value distribution.  If W has a Weibull distribution as
     computed by the ‘wblcdf’ function, then -W has a type III extreme
     value distribution and 1/W has a type II extreme value
     distribution.  In the limit as K approaches 0, the GEV is the
     mirror image of the type I extreme value distribution as computed
     by the ‘evcdf’ function.

     The mean of the GEV distribution is not finite when K >= 1, and the
     variance is not finite when K >= 1/2.  The GEV distribution has
     positive density only for values of X such that K * (X - MU) /
     SIGMA > -1.

     Further information about the generalized extreme value
     distribution can be found at
     <https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution>

     See also: gevinv, gevpdf, gevrnd, gevfit, gevlike, gevstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 71
Generalized extreme value (GEV) cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gevinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1457
 -- statistics: X = gevinv (P, K, SIGMA, MU)

     Inverse of the generalized extreme value (GEV) cumulative
     distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the GEV distribution with shape parameter K, scale
     parameter SIGMA, and location parameter MU.  The size of P is the
     common size of X, K, SIGMA, and MU.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When K < 0, the GEV is the type III extreme value distribution.
     When K > 0, the GEV distribution is the type II, or Frechet,
     extreme value distribution.  If W has a Weibull distribution as
     computed by the ‘wblcdf’ function, then -W has a type III extreme
     value distribution and 1/W has a type II extreme value
     distribution.  In the limit as K approaches 0, the GEV is the
     mirror image of the type I extreme value distribution as computed
     by the ‘evcdf’ function.

     The mean of the GEV distribution is not finite when K >= 1, and the
     variance is not finite when K >= 1/2.  The GEV distribution has
     positive density only for values of X such that K * (X - MU) /
     SIGMA > -1.

     Further information about the generalized extreme value
     distribution can be found at
     <https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution>

     See also: gevcdf, gevpdf, gevrnd, gevfit, gevlike, gevstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Inverse of the generalized extreme value (GEV) cumulative distribution
functi...



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gevpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1433
 -- statistics: Y = gevpdf (X, K, SIGMA, MU)

     Generalized extreme value (GEV) probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the GEV distribution with shape parameter K, scale
     parameter SIGMA, and location parameter MU.  The size of Y is the
     common size of X, K, SIGMA, and MU.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When K < 0, the GEV is the type III extreme value distribution.
     When K > 0, the GEV distribution is the type II, or Frechet,
     extreme value distribution.  If W has a Weibull distribution as
     computed by the ‘wblcdf’ function, then -W has a type III extreme
     value distribution and 1/W has a type II extreme value
     distribution.  In the limit as K approaches 0, the GEV is the
     mirror image of the type I extreme value distribution as computed
     by the ‘evcdf’ function.

     The mean of the GEV distribution is not finite when K >= 1, and the
     variance is not finite when K >= 1/2.  The GEV distribution has
     positive density only for values of X such that K * (X - MU) /
     SIGMA > -1.

     Further information about the generalized extreme value
     distribution can be found at
     <https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution>

     See also: gevcdf, gevinv, gevrnd, gevfit, gevlike, gevstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
Generalized extreme value (GEV) probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gevrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1982
 -- statistics: R = gevrnd (K, SIGMA, MU)
 -- statistics: R = gevrnd (K, SIGMA, MU, ROWS)
 -- statistics: R = gevrnd (K, SIGMA, MU, ROWS, COLS, ...)
 -- statistics: R = gevrnd (K, SIGMA, MU, [SZ])

     Random arrays from the generalized extreme value (GEV)
     distribution.

     ‘R = gevrnd (K, SIGMA, MU’ returns an array of random numbers
     chosen from the GEV distribution with shape parameter K, scale
     parameter SIGMA, and location parameter MU.  The size of R is the
     common size of K, SIGMA, and MU.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘gevrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     When K < 0, the GEV is the type III extreme value distribution.
     When K > 0, the GEV distribution is the type II, or Frechet,
     extreme value distribution.  If W has a Weibull distribution as
     computed by the ‘wblcdf’ function, then -W has a type III extreme
     value distribution and 1/W has a type II extreme value
     distribution.  In the limit as K approaches 0, the GEV is the
     mirror image of the type I extreme value distribution as computed
     by the ‘evcdf’ function.

     The mean of the GEV distribution is not finite when K >= 1, and the
     variance is not finite when K >= 1/2.  The GEV distribution has
     positive density only for values of X such that K * (X - MU) /
     SIGMA > -1.

     Further information about the generalized extreme value
     distribution can be found at
     <https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution>

     See also: gevcdf, gevinv, gevpdf, gevfit, gevlike, gevstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
Random arrays from the generalized extreme value (GEV) distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
gpcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1425
 -- statistics: P = gpcdf (X, K, SIGMA, THETA)
 -- statistics: P = gpcdf (X, K, SIGMA, THETA, "upper")

     Generalized Pareto cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the generalized Pareto distribution with shape parameter
     K, scale parameter SIGMA, and location parameter THETA.  The size
     of P is the common size of X, K, SIGMA, and THETA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     ‘[...] = gpcdf(X, K, SIGMA, THETA, "upper")’ computes the upper
     tail probability of the generalized Pareto distribution with
     parameters K, SIGMA, and THETA, at the values in X.

     When K = 0 and THETA = 0, the Generalized Pareto is equivalent to
     the exponential distribution.  When K > 0 and ‘THETA = K / K’ the
     Generalized Pareto is equivalent τπ the Pareto distribution.  The
     mean of the Generalized Pareto is not finite when K >= 1 and the
     variance is not finite when K >= 1/2.  When K >= 0, the Generalized
     Pareto has positive density for X > THETA, or, when THETA < 0, for
     0 <= (X - THETA) / SIGMA <= -1 / K.

     Further information about the generalized Pareto distribution can
     be found at
     <https://en.wikipedia.org/wiki/Generalized_Pareto_distribution>

     See also: gpinv, gppdf, gprnd, gpfit, gplike, gpstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 58
Generalized Pareto cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
gpinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1186
 -- statistics: X = gpinv (P, K, SIGMA, THETA)

     Inverse of the generalized Pareto cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the generalized Pareto distribution with shape parameter K,
     scale parameter SIGMA, and location parameter THETA.  The size of X
     is the common size of P, K, SIGMA, and THETA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     When K = 0 and THETA = 0, the Generalized Pareto is equivalent to
     the exponential distribution.  When K > 0 and ‘THETA = K / K’ the
     Generalized Pareto is equivalent to the Pareto distribution.  The
     mean of the Generalized Pareto is not finite when K >= 1 and the
     variance is not finite when K >= 1/2.  When K >= 0, the Generalized
     Pareto has positive density for X > THETA, or, when THETA < 0, for
     0 <= (X - THETA) / SIGMA <= -1 / K.

     Further information about the generalized Pareto distribution can
     be found at
     <https://en.wikipedia.org/wiki/Generalized_Pareto_distribution>

     See also: gpcdf, gppdf, gprnd, gpfit, gplike, gpstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 74
Inverse of the generalized Pareto cumulative distribution function
(iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
gppdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1162
 -- statistics: Y = gppdf (X, K, SIGMA, THETA)

     Generalized Pareto probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the generalized Pareto distribution with shape parameter
     K, scale parameter SIGMA, and location parameter THETA.  The size
     of Y is the common size of P, K, SIGMA, and THETA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     When K = 0 and THETA = 0, the Generalized Pareto is equivalent to
     the exponential distribution.  When K > 0 and ‘THETA = K / K’ the
     Generalized Pareto is equivalent to the Pareto distribution.  The
     mean of the Generalized Pareto is not finite when K >= 1 and the
     variance is not finite when K >= 1/2.  When K >= 0, the Generalized
     Pareto has positive density for X > THETA, or, when THETA < 0, for
     0 <= (X - THETA) / SIGMA <= -1 / K.

     Further information about the generalized Pareto distribution can
     be found at
     <https://en.wikipedia.org/wiki/Generalized_Pareto_distribution>

     See also: gpcdf, gpinv, gprnd, gpfit, gplike, gpstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Generalized Pareto probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
gprnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1713
 -- statistics: R = gprnd (K, SIGMA, THETA)
 -- statistics: R = gprnd (K, SIGMA, THETA, ROWS)
 -- statistics: R = gprnd (K, SIGMA, THETA, ROWS, COLS, ...)
 -- statistics: R = gprnd (K, SIGMA, THETA, [SZ])

     Random arrays from the generalized Pareto distribution.

     ‘R = gprnd (K, SIGMA, THETA)’ returns an array of random numbers
     chosen from the generalized Pareto distribution with shape
     parameter K, scale parameter SIGMA, and location parameter THETA.
     The size of R is the common size of K, SIGMA, and THETA.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     When called with a single size argument, ‘gprnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     When K = 0 and THETA = 0, the Generalized Pareto is equivalent to
     the exponential distribution.  When K > 0 and ‘THETA = K / K’ the
     Generalized Pareto is equivalent to the Pareto distribution.  The
     mean of the Generalized Pareto is not finite when K >= 1 and the
     variance is not finite when K >= 1/2.  When K >= 0, the Generalized
     Pareto has positive density for X > THETA, or, when THETA < 0, for
     0 <= (X - THETA) / SIGMA <= -1 / K.

     Further information about the generalized Pareto distribution can
     be found at
     <https://en.wikipedia.org/wiki/Generalized_Pareto_distribution>

     See also: gpcdf, gpinv, gppdf, gpfit, gplike, gpstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 55
Random arrays from the generalized Pareto distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
gumbelcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2195
 -- statistics: P = gumbelcdf (X)
 -- statistics: P = gumbelcdf (X, MU)
 -- statistics: P = gumbelcdf (X, MU, BETA)
 -- statistics: P = gumbelcdf (..., "upper")
 -- statistics: [P, PLO, PUP] = gumbelcdf (X, MU, BETA, PCOV)
 -- statistics: [P, PLO, PUP] = gumbelcdf (X, MU, BETA, PCOV, ALPHA)
 -- statistics: [P, PLO, PUP] = gumbelcdf (..., "upper")

     Gumbel cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Gumbel distribution (also known as the extreme value
     or the type I generalized extreme value distribution) with location
     parameter MU and scale parameter BETA.  The size of P is the common
     size of X, MU and BETA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     Default values are MU = 0 and BETA = 1.

     When called with three output arguments, i.e.  ‘[P, PLO, PUP]’,
     ‘gumbelcdf’ computes the confidence bounds for P when the input
     parameters MU and BETA are estimates.  In such case, PCOV, a 2x2
     matrix containing the covariance matrix of the estimated
     parameters, is necessary.  Optionally, ALPHA, which has a default
     value of 0.05, specifies the 100 * (1 - ALPHA) percent confidence
     bounds.  PLO and PUP are arrays of the same size as P containing
     the lower and upper confidence bounds.

     ‘[...] = gumbelcdf (..., "upper")’ computes the upper tail
     probability of the Gumbel distribution with parameters MU and BETA,
     at the values in X.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling maxima.  For
     modeling minima, use the alternative extreme value CDF, ‘evcdf’.

     ‘[...] = gumbelcdf (..., "upper")’ computes the upper tail
     probability of the extreme value (Gumbel) distribution.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: gumbelinv, gumbelpdf, gumbelrnd, gumbelfit, gumbellike,
     gumbelstat, evcdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Gumbel cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
gumbelinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1802
 -- statistics: X = gumbelinv (P)
 -- statistics: X = gumbelinv (P, MU)
 -- statistics: X = gumbelinv (P, MU, BETA)
 -- statistics: [X, XLO, XUP] = gumbelinv (P, MU, BETA, PCOV)
 -- statistics: [X, XLO, XUP] = gumbelinv (P, MU, BETA, PCOV, ALPHA)

     Inverse of the Gumbel cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Gumbel distribution (also known as the extreme value or
     the type I generalized extreme value distribution) with location
     parameter MU and scale parameter BETA.  The size of X is the common
     size of P, MU and BETA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     Default values are MU = 0 and BETA = 1.

     When called with three output arguments, i.e.  [X, XLO, XUP],
     ‘gumbelinv’ computes the confidence bounds for X when the input
     parameters MU and BETA are estimates.  In such case, PCOV, a 2x2
     matrix containing the covariance matrix of the estimated
     parameters, is necessary.  Optionally, ALPHA, which has a default
     value of 0.05, specifies the 100 * (1 - ALPHA) percent confidence
     bounds.  XLO and XUP are arrays of the same size as X containing
     the lower and upper confidence bounds.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling maxima.  For
     modeling minima, use the alternative extreme value iCDF, ‘evinv’.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: gumbelcdf, gumbelpdf, gumbelrnd, gumbelfit, gumbellike,
     gumbelstat, evinv.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 62
Inverse of the Gumbel cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
gumbelpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1123
 -- statistics: Y = gumbelpdf (X)
 -- statistics: Y = gumbelpdf (X, MU)
 -- statistics: Y = gumbelpdf (X, MU, BETA)

     Gumbel probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Gumbel distribution (also known as the extreme value
     or the type I generalized extreme value distribution) with location
     parameter MU and scale parameter BETA.  The size of Y is the common
     size of X, MU and BETA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     Default values are MU = 0 and BETA = 1.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling maxima.  For
     modeling minima, use the alternative extreme value iCDF, ‘evpdf’.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: gumbelcdf, gumbelinv, gumbelrnd, gumbelfit, gumbellike,
     gumbelstat, evpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Gumbel probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
gumbelrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1549
 -- statistics: R = gumbelrnd (MU, BETA)
 -- statistics: R = gumbelrnd (MU, BETA, ROWS)
 -- statistics: R = gumbelrnd (MU, BETA, ROWS, COLS, ...)
 -- statistics: R = gumbelrnd (MU, BETA, [SZ])

     Random arrays from the Gumbel distribution.

     ‘R = gumbelrnd (MU, BETA)’ returns an array of random numbers
     chosen from the Gumbel distribution (also known as the extreme
     value or the type I generalized extreme value distribution) with
     location parameter MU and scale parameter BETA.  The size of R is
     the common size of MU and BETA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘gumbelrnd’ returns a
     square matrix with the dimension specified.  When called with more
     than one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     The Gumbel distribution is used to model the distribution of the
     maximum (or the minimum) of a number of samples of various
     distributions.  This version is suitable for modeling maxima.  For
     modeling minima, use the alternative extreme value iCDF, ‘evinv’.

     Further information about the Gumbel distribution can be found at
     <https://en.wikipedia.org/wiki/Gumbel_distribution>

     See also: gumbelcdf, gumbelinv, gumbelpdf, gumbelfit, gumbellike,
     gumbelstat, evrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Random arrays from the Gumbel distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
hncdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 905
 -- statistics: P = hncdf (X, MU, SIGMA)
 -- statistics: P = hncdf (X, MU, SIGMA, "upper")

     Half-normal cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the half-normal distribution with location parameter MU
     and scale parameter SIGMA.  The size of P is the common size of X,
     MU and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     ‘[...] = hncdf (X, MU, SIGMA, "upper")’ computes the upper tail
     probability of the half-normal distribution with parameters MU and
     SIGMA, at the values in X.

     The half-normal CDF is only defined for X >= MU.

     Further information about the half-normal distribution can be found
     at <https://en.wikipedia.org/wiki/Half-normal_distribution>

     See also: hninv, hnpdf, hnrnd, hnfit, hnlike, hnstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
Half-normal cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
hninv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 634
 -- statistics: X = hninv (P, MU, SIGMA)

     Inverse of the half-normal cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the half-normal distribution with location parameter MU and
     scale parameter SIGMA.  The size of X is the common size of P, MU,
     and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Further information about the half-normal distribution can be found
     at <https://en.wikipedia.org/wiki/Half-normal_distribution>

     See also: hncdf, hnpdf, hnrnd, hnfit, hnlike, hnstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
Inverse of the half-normal cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
hnpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 670
 -- statistics: Y = hnpdf (X, MU, SIGMA)

     Half-normal probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the half-normal distribution with location parameter MU
     and scale parameter SIGMA.  The size of Y is the common size of X,
     MU, and SIGMA.  A scalar input functions as a constant matrix of
     the same size as the other inputs.

     The half-normal CDF is only defined for X >= MU.

     Further information about the half-normal distribution can be found
     at <https://en.wikipedia.org/wiki/Half-normal_distribution>

     See also: hncdf, hninv, hnrnd, hnfit, hnlike, hnstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Half-normal probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
hnrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1142
 -- statistics: R = hnrnd (MU, SIGMA)
 -- statistics: R = hnrnd (MU, SIGMA, ROWS)
 -- statistics: R = hnrnd (MU, SIGMA, ROWS, COLS, ...)
 -- statistics: R = hnrnd (MU, SIGMA, [SZ])

     Random arrays from the half-normal distribution.

     ‘R = hnrnd (MU, SIGMA)’ returns an array of random numbers chosen
     from the half-normal distribution with location parameter MU and
     scale parameter SIGMA.  The size of R is the common size of MU and
     SIGMA.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     When called with a single size argument, ‘hnrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the half-normal distribution can be found
     at <https://en.wikipedia.org/wiki/Half-normal_distribution>

     See also: hncdf, hninv, hnpdf, hnfit, hnlike, hnstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Random arrays from the half-normal distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
hygecdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1148
 -- statistics: P = hygecdf (X, M, K, N)
 -- statistics: P = hygecdf (X, M, K, N, "upper")

     Hypergeometric cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the hypergeometric distribution with parameters M, K, and
     N.  The size of P is the common size of X, M, K, and N.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     This is the cumulative probability of obtaining not more than X
     marked items when randomly drawing a sample of size N without
     replacement from a population of total size M containing K marked
     items.  The parameters M, K, and N must be positive integers with K
     and N not greater than M.

     ‘[...] = hygecdf (X, M, K, N, "upper")’ computes the upper tail
     probability of the hypergeometric distribution with parameters M,
     K, and N, at the values in X.

     Further information about the hypergeometric distribution can be
     found at
     <https://en.wikipedia.org/wiki/Hypergeometric_distribution>

     See also: hygeinv, hygepdf, hygernd, hygestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Hypergeometric cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
hygeinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 923
 -- statistics: X = hygeinv (P, M, K, N)

     Inverse of the hypergeometric cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the hypergeometric distribution with parameters M, K, and
     N.  The size of X is the common size of P, M, K, and N.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     This is the number of drawn marked items X given a probability P,
     when randomly drawing a sample of size N without replacement from a
     population of total size M containing K marked items.  The
     parameters M, K, and N must be positive integers with K and N not
     greater than M.

     Further information about the hypergeometric distribution can be
     found at
     <https://en.wikipedia.org/wiki/Hypergeometric_distribution>

     See also: hygeinv, hygepdf, hygernd, hygestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 70
Inverse of the hypergeometric cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
hygepdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1316
 -- statistics: Y = hygepdf (X, M, K, N)
 -- statistics: Y = hygepdf (..., "vectorexpand")

     Hypergeometric probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the hypergeometric distribution with parameters M, K, and
     N.  The size of Y is the common size of X, M, K, and N.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     This is the probability of obtaining X marked items when randomly
     drawing a sample of size N without replacement from a population of
     total size M containing K marked items.  The parameters M, K, and N
     must be positive integers with K and N not greater than M.

     If the optional parameter vectorexpand is provided, X may be an
     array with size different from parameters M, K, and N (which must
     still be of a common size or scalar).  Each element of X will be
     evaluated against each set of parameters M, K, and N in columnwise
     order.  The output Y will be an array of size R x S, where R =
     numel (M), and S = numel (X).

     Further information about the hypergeometric distribution can be
     found at
     <https://en.wikipedia.org/wiki/Hypergeometric_distribution>

     See also: hygecdf, hygeinv, hygernd, hygestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Hypergeometric probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
hygernd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1224
 -- statistics: R = hygernd (M, K, N)
 -- statistics: R = hygernd (M, K, N, ROWS)
 -- statistics: R = hygernd (M, K, N, ROWS, COLS, ...)
 -- statistics: R = hygernd (M, K, N, [SZ])

     Random arrays from the hypergeometric distribution.

     ‘R = hygernd ((M, K, N’ returns an array of random numbers chosen
     from the hypergeometric distribution with parameters M, K, and N.
     The size of R is the common size of M, K, and N.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     The parameters M, K, and N must be positive integers with K and N
     not greater than M.

     When called with a single size argument, ‘hygernd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the hypergeometric distribution can be
     found at
     <https://en.wikipedia.org/wiki/Hypergeometric_distribution>

     See also: hygecdf, hygeinv, hygepdf, hygestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
Random arrays from the hypergeometric distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
invgcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 971
 -- statistics: P = invgcdf (X, MU, LAMBDA)
 -- statistics: P = invgcdf (X, MU, LAMBDA, "upper")

     Inverse Gaussian cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the inverse Gaussian distribution with scale parameter MU
     and shape parameter LAMBDA.  The size of P is the common size of X,
     MU and LAMBDA.  A scalar input functions as a constant matrix of
     the same size as the other inputs.

     ‘P = invgcdf (X, MU, LAMBDA, "upper")’ computes the upper tail
     probability of the inverse Gaussian distribution with parameters MU
     and LAMBDA, at the values in X.

     The inverse Gaussian CDF is only defined for MU > 0 and LAMBDA > 0.

     Further information about the inverse Gaussian distribution can be
     found at
     <https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution>

     See also: invginv, invgpdf, invgrnd, invgfit, invglike, invgstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 56
Inverse Gaussian cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
invginv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 752
 -- statistics: X = invginv (P, MU, LAMBDA)

     Inverse of the inverse Gaussian cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the inverse Gaussian distribution with scale parameter MU
     and shape parameter LAMBDA.  The size of X is the common size of P,
     MU, and LAMBDA.  A scalar input functions as a constant matrix of
     the same size as the other inputs.

     The inverse Gaussian CDF is only defined for MU > 0 and LAMBDA > 0.

     Further information about the inverse Gaussian distribution can be
     found at
     <https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution>

     See also: invgcdf, invgpdf, invgrnd, invgfit, invglike, invgstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 72
Inverse of the inverse Gaussian cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
invgpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 728
 -- statistics: Y = invgpdf (X, MU, LAMBDA)

     Inverse Gaussian probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the inverse Gaussian distribution with scale parameter MU
     and shape parameter LAMBDA.  The size of Y is the common size of X,
     MU, and LAMBDA.  A scalar input functions as a constant matrix of
     the same size as the other inputs.

     The inverse Gaussian CDF is only defined for MU > 0 and LAMBDA > 0.

     Further information about the inverse Gaussian distribution can be
     found at
     <https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution>

     See also: invgcdf, invginv, invgrnd, invgfit, invglike, invgstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 52
Inverse Gaussian probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
invgrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1272
 -- statistics: R = invgrnd (MU, LAMBDA)
 -- statistics: R = invgrnd (MU, LAMBDA, ROWS)
 -- statistics: R = invgrnd (MU, LAMBDA, ROWS, COLS, ...)
 -- statistics: R = invgrnd (MU, LAMBDA, [SZ])

     Random arrays from the inverse Gaussian distribution.

     ‘R = invgrnd (MU, LAMBDA)’ returns an array of random numbers
     chosen from the inverse Gaussian distribution with location
     parameter MU and scale parameter LAMBDA.  The size of R is the
     common size of MU and LAMBDA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘invgrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     The inverse Gaussian CDF is only defined for MU > 0 and LAMBDA > 0.

     Further information about the inverse Gaussian distribution can be
     found at
     <https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution>

     See also: invgcdf, invginv, invgpdf, invgfit, invglike, invgstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Random arrays from the inverse Gaussian distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
iwishpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 677
 -- statistics: Y = iwishpdf (W, TAU, DF, LOG_Y=false)

     Compute the probability density function of the inverse Wishart
     distribution.

     Inputs: A P x P matrix W where to find the PDF and the P x P
     positive definite scale matrix TAU and scalar degrees of freedom
     parameter DF characterizing the inverse Wishart distribution.  (For
     the density to be finite, need DF > (P - 1).)  If the flag LOG_Y is
     set, return the log probability density – this helps avoid
     underflow when the numerical value of the density is very small.

     Output: Y is the probability density of Wishart(SIGMA, DF) at W.

     See also: iwishrnd, wishpdf, wishrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 77
Compute the probability density function of the inverse Wishart
distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
iwishrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1092
 -- statistics: [W, DI] = iwishrnd (TAU, DF, DI, N=1)

     Return a random matrix sampled from the inverse Wishart
     distribution with given parameters.

     Inputs: the p x p positive definite matrix TAU and scalar degrees
     of freedom parameter DF (and optionally the transposed Cholesky
     factor DI of SIGMA = ‘inv(Tau)’).

     DF can be non-integer as long as DF > d

     Output: a random p x p matrix W from the inverse Wishart(TAU, DF)
     distribution.  (‘inv(W)’ is from the Wishart(‘inv(Tau)’, DF)
     distribution.)  If N > 1, then W is P x P x N and holds N such
     random matrices.  (Optionally, the transposed Cholesky factor DI of
     SIGMA is also returned.)

     Averaged across many samples, the mean of W should approach TAU /
     (DF - P - 1).

     References
     ----------

       1. Yu-Cheng Ku and Peter Bloomfield (2010), Generating Random
          Wishart Matrices with Fractional Degrees of Freedom in OX,
          http://www.gwu.edu/~forcpgm/YuChengKu-030510final-WishartYu-ChengKu.pdf

     See also: iwishpdf, wishpdf, wishrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Return a random matrix sampled from the inverse Wishart distribution
with giv...



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
jsucdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 580
 -- statistics: P = jsucdf (X)
 -- statistics: P = jsucdf (X, ALPHA1)
 -- statistics: P = jsucdf (X, ALPHA1, ALPHA2)

     Johnson SU cumulative distribution function (CDF).

     For each element of X, return the cumulative distribution functions
     (CDF) at X of the Johnson SU distribution with shape parameters
     ALPHA1 and ALPHA2.  The size of P is the common size of the input
     arguments X, ALPHA1, and ALPHA2.  A scalar input functions as a
     constant matrix of the same size as the other

     Default values are ALPHA1 = 1, ALPHA2 = 1.

     See also: jsupdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Johnson SU cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
jsupdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 572
 -- statistics: Y = jsupdf (X)
 -- statistics: Y = jsupdf (X, ALPHA1)
 -- statistics: Y = jsupdf (X, ALPHA1, ALPHA2)

     Johnson SU probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) at X of the Johnson SU distribution with shape parameters
     ALPHA1 and ALPHA2.  The size of P is the common size of the input
     arguments X, ALPHA1, and ALPHA2.  A scalar input functions as a
     constant matrix of the same size as the other

     Default values are ALPHA1 = 1, ALPHA2 = 1.

     See also: jsucdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Johnson SU probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
laplacecdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 936
 -- statistics: P = laplacecdf (X, MU, BETA)
 -- statistics: P = laplacecdf (X, MU, BETA, "upper")

     Laplace cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Laplace distribution with location parameter MU and
     scale parameter (i.e.  "diversity") BETA.  The size of P is the
     common size of X, MU, and BETA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Both parameters must be reals and BETA > 0.  For BETA <= 0, NaN is
     returned.

     ‘P = laplacecdf (X, MU, BETA, "upper")’ computes the upper tail
     probability of the Laplace distribution with parameters MU and
     BETA, at the values in X.

     Further information about the Laplace distribution can be found at
     <https://en.wikipedia.org/wiki/Laplace_distribution>

     See also: laplaceinv, laplacepdf, laplacernd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Laplace cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
laplaceinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 720
 -- statistics: X = laplaceinv (P, MU, BETA)

     Inverse of the Laplace cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Laplace distribution with location parameter MU and
     scale parameter (i.e.  "diversity") BETA.  The size of X is the
     common size of P, MU, and BETA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Both parameters must be reals and BETA > 0.  For BETA <= 0, NaN is
     returned.

     Further information about the Laplace distribution can be found at
     <https://en.wikipedia.org/wiki/Laplace_distribution>

     See also: laplaceinv, laplacepdf, laplacernd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Inverse of the Laplace cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
laplacepdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 701
 -- statistics: Y = laplacepdf (X, MU, BETA)

     Laplace probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Laplace distribution with location parameter MU and
     scale parameter (i.e.  "diversity") BETA.  The size of Y is the
     common size of X, MU, and BETA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Both parameters must be reals and BETA > 0.  For BETA <= 0, NaN is
     returned.

     Further information about the Laplace distribution can be found at
     <https://en.wikipedia.org/wiki/Laplace_distribution>

     See also: laplacecdf, laplacepdf, laplacernd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Laplace probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
laplacernd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1229
 -- statistics: R = laplacernd (MU, BETA)
 -- statistics: R = laplacernd (MU, BETA, ROWS)
 -- statistics: R = laplacernd (MU, BETA, ROWS, COLS, ...)
 -- statistics: R = laplacernd (MU, BETA, [SZ])

     Random arrays from the Laplace distribution.

     ‘R = laplacernd (MU, BETA)’ returns an array of random numbers
     chosen from the Laplace distribution with location parameter MU and
     scale parameter BETA.  The size of R is the common size of MU and
     BETA.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     Both parameters must be reals and BETA > 0.  For BETA <= 0, NaN is
     returned.

     When called with a single size argument, ‘laplacernd’ returns a
     square matrix with the dimension specified.  When called with more
     than one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Laplace distribution can be found at
     <https://en.wikipedia.org/wiki/Laplace_distribution>

     See also: laplacecdf, laplaceinv, laplacernd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Random arrays from the Laplace distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
logicdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 940
 -- statistics: P = logicdf (X, MU, SIGMA)
 -- statistics: P = logicdf (X, MU, SIGMA, "upper")

     Logistic cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the logistic distribution with location parameter MU and
     scale parameter SIGMA.  The size of P is the common size of X, MU,
     and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters must be reals and SIGMA > 0.  For SIGMA <= 0, NaN
     is returned.

     ‘P = logicdf (X, MU, SIGMA, "upper")’ computes the upper tail
     probability of the logistic distribution with parameters MU and
     SIGMA, at the values in X.

     Further information about the logistic distribution can be found at
     <https://en.wikipedia.org/wiki/Logistic_distribution>

     See also: logiinv, logipdf, logirnd, logifit, logilike, logistat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Logistic cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
logiinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 726
 -- statistics: X = logiinv (P, MU, SIGMA)

     Inverse of the logistic cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the logistic distribution with location parameter MU and
     scale parameter SIGMA.  The size of P is the common size of X, MU,
     and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters must be reals and SIGMA > 0.  For SIGMA <= 0, NaN
     is returned.

     Further information about the logistic distribution can be found at
     <https://en.wikipedia.org/wiki/Logistic_distribution>

     See also: logicdf, logipdf, logirnd, logifit, logilike, logistat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 64
Inverse of the logistic cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
logipdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 707
 -- statistics: Y = logipdf (X, MU, SIGMA)

     Logistic probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the logistic distribution with location parameter MU and
     scale parameter SIGMA.  The size of P is the common size of X, MU,
     and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters must be reals and SIGMA > 0.  For SIGMA <= 0, NaN
     is returned.

     Further information about the logistic distribution can be found at
     <https://en.wikipedia.org/wiki/Logistic_distribution>

     See also: logicdf, logiinv, logirnd, logifit, logilike, logistat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Logistic probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
logirnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1242
 -- statistics: R = logirnd (MU, SIGMA)
 -- statistics: R = logirnd (MU, SIGMA, ROWS)
 -- statistics: R = logirnd (MU, SIGMA, ROWS, COLS, ...)
 -- statistics: R = logirnd (MU, SIGMA, [SZ])

     Random arrays from the logistic distribution.

     ‘R = logirnd (MU, SIGMA)’ returns an array of random numbers chosen
     from the logistic distribution with location parameter MU and scale
     parameter SIGMA.  The size of R is the common size of MU and SIGMA.
     A scalar input functions as a constant matrix of the same size as
     the other inputs.

     Both parameters must be reals and SIGMA > 0.  For SIGMA <= 0, NaN
     is returned.

     When called with a single size argument, ‘logirnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the logistic distribution can be found at
     <https://en.wikipedia.org/wiki/Logistic_distribution>

     See also: logcdf, logiinv, logipdf, logifit, logilike, logistat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Random arrays from the logistic distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
loglcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1286
 -- statistics: P = loglcdf (X, MU, SIGMA)
 -- statistics: P = loglcdf (X, MU, SIGMA, "upper")

     Loglogistic cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the loglogistic distribution with mean parameter MU and
     scale parameter SIGMA.  The size of P is the common size of X, MU,
     and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters, MU and SIGMA, must be positive reals and X is
     supported in the range [0,inf), otherwise NaN is returned.

     ‘P = loglcdf (X, MU, SIGMA, "upper")’ computes the upper tail
     probability of the log-logistic distribution with parameters MU and
     SIGMA, at the values in X.

     Further information about the loglogistic distribution can be found
     at <https://en.wikipedia.org/wiki/Log-logistic_distribution>

     OCTAVE/MATLAB use an alternative parameterization given by the pair
     μ, σ, i.e.  MU and SIGMA, in analogy with the logistic
     distribution.  Their relation to the α and b parameters used in
     Wikipedia are given below:

        • MU = log (A)
        • SIGMA = 1 / A

     See also: loglinv, loglpdf, loglrnd, loglfit, logllike, loglstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
Loglogistic cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
loglinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1073
 -- statistics: X = loglinv (P, MU, SIGMA)

     Inverse of the log-logistic cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the log-logistic distribution with mean parameter MU and
     scale parameter SIGMA.  The size of X is the common size of P, MU,
     and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters, MU and SIGMA, must be positive reals and P is
     supported in the range [0,1], otherwise NaN is returned.

     Further information about the loglogistic distribution can be found
     at <https://en.wikipedia.org/wiki/Log-logistic_distribution>

     OCTAVE/MATLAB use an alternative parameterization given by the pair
     μ, σ, i.e.  MU and SIGMA, in analogy with the logistic
     distribution.  Their relation to the α and b parameters used in
     Wikipedia are given below:

        • MU = log (A)
        • SIGMA = 1 / A

     See also: loglcdf, loglpdf, loglrnd, loglfit, logllike, loglstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
Inverse of the log-logistic cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
loglpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1077
 -- statistics: Y = loglpdf (X, MU, SIGMA)

     Loglogistic probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the loglogistic distribution with mean parameter MU and
     scale parameter SIGMA.  The size of Y is the common size of X, MU,
     and SIGMA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters, MU and SIGMA, must be positive reals, otherwise
     NaN is returned.  X is supported in the range [0,Inf), otherwise 0
     is returned.

     Further information about the loglogistic distribution can be found
     at <https://en.wikipedia.org/wiki/Log-logistic_distribution>

     OCTAVE/MATLAB use an alternative parameterization given by the pair
     μ, σ, i.e.  MU and SIGMA, in analogy with the logistic
     distribution.  Their relation to the α and b parameters used in
     Wikipedia are given below:

        • MU = log (A)
        • SIGMA = 1 / A

     See also: loglcdf, loglinv, loglrnd, loglfit, logllike, loglstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Loglogistic probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
loglrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1528
 -- statistics: R = loglrnd (MU, SIGMA)
 -- statistics: R = loglrnd (MU, SIGMA, ROWS)
 -- statistics: R = loglrnd (MU, SIGMA, ROWS, COLS, ...)
 -- statistics: R = loglrnd (MU, SIGMA, [SZ])

     Random arrays from the loglogistic distribution.

     ‘R = loglrnd (MU, SIGMA)’ returns an array of random numbers chosen
     from the loglogistic distribution with mean parameter MU and scale
     parameter SIGMA.  The size of R is the common size of MU and SIGMA.
     A scalar input functions as a constant matrix of the same size as
     the other inputs.

     Both parameters must be positive reals, otherwise NaN is returned.

     When called with mu single size argument, ‘loglrnd’ returns mu
     square matrix with the dimension specified.  When called with more
     than one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     mu row vector of dimensions, SZ.

     Further information about the loglogistic distribution can be found
     at <https://en.wikipedia.org/wiki/Log-logistic_distribution>

     OCTAVE/MATLAB use an alternative parameterization given by the pair
     μ, σ, i.e.  MU and SIGMA, in analogy with the logistic
     distribution.  Their relation to the α and b parameters used in
     Wikipedia are given below:

        • MU = log (A)
        • SIGMA = 1 / A

     See also: loglcdf, loglinv, loglpdf, loglfit, logllike, loglstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Random arrays from the loglogistic distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
logncdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1977
 -- statistics: P = logncdf (X)
 -- statistics: P = logncdf (X, MU)
 -- statistics: P = logncdf (X, MU, SIGMA)
 -- statistics: P = logncdf (..., "upper")
 -- statistics: [P, PLO, PUP] = logncdf (X, MU, SIGMA, PCOV)
 -- statistics: [P, PLO, PUP] = logncdf (X, MU, SIGMA, PCOV, ALPHA)
 -- statistics: [P, PLO, PUP] = logncdf (..., "upper")

     Lognormal cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the lognormal distribution with mean parameter MU and
     standard deviation parameter SIGMA, each corresponding to the
     associated normal distribution.  The size of P is the common size
     of X, MU, and SIGMA.  A scalar input functions as a constant matrix
     of the same size as the other inputs.

     If a random variable follows this distribution, its logarithm is
     normally distributed with mean MU and standard deviation SIGMA.

     Default parameter values are MU = 0 and SIGMA = 1.  Both parameters
     must be reals and SIGMA > 0.  For SIGMA <= 0, NaN is returned.

     When called with three output arguments, i.e.  [P, PLO, PUP],
     ‘logncdf’ computes the confidence bounds for P when the input
     parameters MU and SIGMA are estimates.  In such case, PCOV, a 2x2
     matrix containing the covariance matrix of the estimated
     parameters, is necessary.  Optionally, ALPHA, which has a default
     value of 0.05, specifies the 100 * (1 - ALPHA) percent confidence
     bounds.  PLO and PUP are arrays of the same size as P containing
     the lower and upper confidence bounds.

     ‘[...] = logncdf (..., "upper")’ computes the upper tail
     probability of the log-normal distribution with parameters MU and
     SIGMA, at the values in X.

     Further information about the lognormal distribution can be found
     at <https://en.wikipedia.org/wiki/Log-normal_distribution>

     See also: logninv, lognpdf, lognrnd, lognfit, lognlike, lognstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Lognormal cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
logninv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1063
 -- statistics: X = logninv (P)
 -- statistics: X = logninv (P, MU)
 -- statistics: X = logninv (P, MU, SIGMA)

     Inverse of the lognormal cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the lognormal distribution with mean parameter MU and
     standard deviation parameter SIGMA, each corresponding to the
     associated normal distribution.  The size of X is the common size
     of P, MU, and SIGMA.  A scalar input functions as a constant matrix
     of the same size as the other inputs.

     If a random variable follows this distribution, its logarithm is
     normally distributed with mean MU and standard deviation SIGMA.

     Default parameter values are MU = 0 and SIGMA = 1.  Both parameters
     must be reals and SIGMA > 0.  For SIGMA <= 0, NaN is returned.

     Further information about the lognormal distribution can be found
     at <https://en.wikipedia.org/wiki/Log-normal_distribution>

     See also: logncdf, lognpdf, lognrnd, lognfit, lognlike, lognstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 65
Inverse of the lognormal cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
lognpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1044
 -- statistics: Y = lognpdf (X)
 -- statistics: Y = lognpdf (X, MU)
 -- statistics: Y = lognpdf (X, MU, SIGMA)

     Lognormal probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the lognormal distribution with mean parameter MU and
     standard deviation parameter SIGMA, each corresponding to the
     associated normal distribution.  The size of Y is the common size
     of P, MU, and SIGMA.  A scalar input functions as a constant matrix
     of the same size as the other inputs.

     If a random variable follows this distribution, its logarithm is
     normally distributed with mean MU and standard deviation SIGMA.

     Default parameter values are MU = 0 and SIGMA = 1.  Both parameters
     must be reals and SIGMA > 0.  For SIGMA <= 0, NaN is returned.

     Further information about the lognormal distribution can be found
     at <https://en.wikipedia.org/wiki/Log-normal_distribution>

     See also: logncdf, logninv, lognrnd, lognfit, lognlike, lognstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Lognormal probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
lognrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1407
 -- statistics: R = lognrnd (MU, SIGMA)
 -- statistics: R = lognrnd (MU, SIGMA, ROWS)
 -- statistics: R = lognrnd (MU, SIGMA, ROWS, COLS, ...)
 -- statistics: R = lognrnd (MU, SIGMA, [SZ])

     Random arrays from the lognormal distribution.

     ‘R = lognrnd (MU, SIGMA)’ returns an array of random numbers chosen
     from the lognormal distribution with mean parameter MU and standard
     deviation parameter SIGMA, each corresponding to the associated
     normal distribution.  The size of R is the common size of MU, and
     SIGMA.  A scalar input functions as a constant matrix of the same
     size as the other inputs.  Both parameters must be reals and SIGMA
     > 0.  For SIGMA <= 0, NaN is returned.

     Both parameters must be reals and SIGMA > 0.  For SIGMA <= 0, NaN
     is returned.

     When called with a single size argument, ‘lognrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the lognormal distribution can be found
     at <https://en.wikipedia.org/wiki/Log-normal_distribution>

     See also: logncdf, logninv, lognpdf, lognfit, lognlike, lognstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Random arrays from the lognormal distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
mnpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1708
 -- statistics: Y = mnpdf (X, PK)

     Multinomial probability density function (PDF).

     Arguments
     ---------

        • X is vector with a single sample of a multinomial distribution
          with parameter PK or a matrix of random samples from
          multinomial distributions.  In the latter case, each row of X
          is a sample from a multinomial distribution with the
          corresponding row of PK being its parameter.

        • PK is a vector with the probabilities of the categories or a
          matrix with each row containing the probabilities of a
          multinomial sample.

     Return values
     -------------

        • Y is a vector of probabilites of the random samples X from the
          multinomial distribution with corresponding parameter PK.  The
          parameter N of the multinomial distribution is the sum of the
          elements of each row of X.  The length of Y is the number of
          columns of X.  If a row of PK does not sum to ‘1’, then the
          corresponding element of Y will be ‘NaN’.

     Examples
     --------

          x = [1, 4, 2];
          pk = [0.2, 0.5, 0.3];
          y = mnpdf (x, pk);

          x = [1, 4, 2; 1, 0, 9];
          pk = [0.2, 0.5, 0.3; 0.1, 0.1, 0.8];
          y = mnpdf (x, pk);

     References
     ----------

       1. Wendy L. Martinez and Angel R. Martinez.  ‘Computational
          Statistics Handbook with MATLAB’. Appendix E, pages 547-557,
          Chapman & Hall/CRC, 2001.

       2. Merran Evans, Nicholas Hastings and Brian Peacock.
          ‘Statistical Distributions’.  pages 134-136, Wiley, New York,
          third edition, 2000.

     See also: mnrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Multinomial probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
mnrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2269
 -- statistics: R = mnrnd (N, PK)
 -- statistics: R = mnrnd (N, PK, S)

     Random arrays from the multinomial distribution.

     Arguments
     ---------

        • N is the first parameter of the multinomial distribution.  N
          can be scalar or a vector containing the number of trials of
          each multinomial sample.  The elements of N must be
          non-negative integers.

        • PK is the second parameter of the multinomial distribution.
          PK can be a vector with the probabilities of the categories or
          a matrix with each row containing the probabilities of a
          multinomial sample.  If PK has more than one row and N is
          non-scalar, then the number of rows of PK must match the
          number of elements of N.

        • S is the number of multinomial samples to be generated.  S
          must be a non-negative integer.  If S is specified, then N
          must be scalar and PK must be a vector.

     Return values
     -------------

        • R is a matrix of random samples from the multinomial
          distribution with corresponding parameters N and PK.  Each row
          corresponds to one multinomial sample.  The number of columns,
          therefore, corresponds to the number of columns of PK.  If S
          is not specified, then the number of rows of R is the maximum
          of the number of elements of N and the number of rows of PK.
          If a row of PK does not sum to ‘1’, then the corresponding row
          of R will contain only ‘NaN’ values.

     Examples
     --------

          n = 10;
          pk = [0.2, 0.5, 0.3];
          r = mnrnd (n, pk);

          n = 10 * ones (3, 1);
          pk = [0.2, 0.5, 0.3];
          r = mnrnd (n, pk);

          n = (1:2)';
          pk = [0.2, 0.5, 0.3; 0.1, 0.1, 0.8];
          r = mnrnd (n, pk);

     References
     ----------

       1. Wendy L. Martinez and Angel R. Martinez.  ‘Computational
          Statistics Handbook with MATLAB’. Appendix E, pages 547-557,
          Chapman & Hall/CRC, 2001.

       2. Merran Evans, Nicholas Hastings and Brian Peacock.
          ‘Statistical Distributions’.  pages 134-136, Wiley, New York,
          third edition, 2000.

     See also: mnpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Random arrays from the multinomial distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
mvncdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 3003
 -- statistics: P = mvncdf (X)
 -- statistics: P = mvncdf (X, MU, SIGMA)
 -- statistics: P = mvncdf (X_LO, X_UP, MU, SIGMA)
 -- statistics: P = mvncdf (..., OPTIONS)
 -- statistics: [P, ERR] = mvncdf (...)

     Multivariate normal cumulative distribution function (CDF).

     ‘P = mvncdf (X)’ returns the cumulative probability of the
     multivariate normal distribution evaluated at each row of X with
     zero mean and an identity covariance matrix.  The rows of matrix X
     correspond to observations and its columns to variables.  The
     return argument P is a column vector with the same number of rows
     as in X.

     ‘P = mvncdf (X, MU, SIGMA)’ returns cumulative probability of the
     multivariate normal distribution evaluated at each row of X with
     mean MU and a covariance matrix SIGMA.  MU can be either a scalar
     (the same of every variable) or a row vector with the same number
     of elements as the number of variables in X.  SIGMA covariance
     matrix may be specified a row vector if it only contains variances
     along its diagonal and zero covariances of the diagonal.  In such a
     case, the diagonal vector SIGMA must have the same number of
     elements as the number of variables (columns) in X.  If you only
     want to specify sigma, you can pass an empty matrix for MU.

     The multivariate normal cumulative probability at X is defined as
     the probability that a random vector V, distributed as multivariate
     normal, will fall within the semi-infinite rectangle with upper
     limits defined by X.
        • Pr{V(1)<=X(1), V(2)<=X(2), ... V(D)<=X(D)}.

     ‘P = mvncdf (X_LO, X_HI, MU, SIGMA)’ returns the multivariate
     normal cumulative probability evaluated over the rectangle
     (hyper-rectangle for multivariate data in X) with lower and upper
     limits defined by X_LO and X_HI, respectively.

     ‘[P, ERR] = mvncdf (...)’ also returns an error estimate ERR in P.

     ‘P = mvncdf (..., OPTIONS)’ specifies the structure, which controls
     specific parameters for the numerical integration used to compute
     P.  The required fieds are:

     "TolFun"            Maximum absolute error tolerance.  Default is 1e-8
                         for D < 4, or 1e-4 for D >= 4.  Note that for
                         bivariate normal cdf, the Octave implementation has
                         a presicion of more than 1e-10.
                         
     "MaxFunEvals"       Maximum number of integrand evaluations.  Default is
                         1e7 for D > 4.
                         
     "Display"           Display options.  Choices are "off" (default),
                         "iter", which shows the probability and estimated
                         error at each repetition, and "final", which shows
                         the final probability and related error after the
                         integrand has converged successfully.

     See also: bvncdf, mvnpdf, mvnrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 59
Multivariate normal cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
mvnpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1748
 -- statistics: Y = mvnpdf (X, MU, SIGMA)

     Multivariate normal probability density function (PDF).

     ‘Y = mvnpdf (X)’ returns the probability density of the
     multivariate normal distribution with zero mean and identity
     covariance matrix, evaluated at each row of X.  Rows of the N-by-D
     matrix X correspond to observations orpoints, and columns
     correspond to variables or coordinates.  Y is an N-by-1 vector.

     ‘Y = mvnpdf (X, MU)’ returns the density of the multivariate normal
     distribution with mean MU and identity covariance matrix, evaluated
     at each row of X.  MU is a 1-by-D vector, or an N-by-D matrix, in
     which case the density is evaluated for each row of X with the
     corresponding row of MU.  MU can also be a scalar value, which
     MVNPDF replicates to match the size of X.

     ‘Y = mvnpdf (X, MU, SIGMA)’ returns the density of the multivariate
     normal distribution with mean MU and covariance SIGMA, evaluated at
     each row of X.  SIGMA is a D-by-D matrix, or an D-by-D-by-N array,
     in which case the density is evaluated for each row of X with the
     corresponding page of SIGMA, i.e., ‘mvnpdf’ computes Y(I) using
     X(I,:) and SIGMA(:,:,I).  If the covariance matrix is diagonal,
     containing variances along the diagonal and zero covariances off
     the diagonal, SIGMA may also be specified as a 1-by-D matrix or a
     1-by-D-by-N array, containing just the diagonal.  Pass in the empty
     matrix for MU to use its default value when you want to only
     specify SIGMA.

     If X is a 1-by-D vector, ‘mvnpdf’ replicates it to match the
     leading dimension of MU or the trailing dimension of SIGMA.

     See also: mvncdf, mvnrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 55
Multivariate normal probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
mvnrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1831
 -- statistics: R = mvnrnd (MU, SIGMA)
 -- statistics: R = mvnrnd (MU, SIGMA, N)
 -- statistics: R = mvnrnd (MU, SIGMA, N, T)
 -- statistics: [R, T] = mvnrnd (...)

     Random vectors from the multivariate normal distribution.

     ‘R = mvnrnd (MU, SIGMA)’ returns an N-by-D matrix R of random
     vectors chosen from the multivariate normal distribution with mean
     vector MU and covariance matrix SIGMA.  MU is an N-by-D matrix, and
     ‘mvnrnd’ generates each N of R using the corresponding N of MU.
     SIGMA is a D-by-D symmetric positive semi-definite matrix, or a
     D-by-D-by-N array.  If SIGMA is an array, ‘mvnrnd’ generates each N
     of R using the corresponding page of SIGMA, i.e., ‘mvnrnd’ computes
     R(I,:) using MU(I,:) and SIGMA(:,:,I).  If the covariance matrix is
     diagonal, containing variances along the diagonal and zero
     covariances off the diagonal, SIGMA may also be specified as a
     1-by-D matrix or a 1-by-D-by-N array, containing just the diagonal.
     If MU is a 1-by-D vector, ‘mvnrnd’ replicates it to match the
     trailing dimension of SIGMA.

     ‘R = mvnrnd (MU, SIGMA, N)’ returns a N-by-D matrix R of random
     vectors chosen from the multivariate normal distribution with
     1-by-D mean vector MU, and D-by-D covariance matrix SIGMA.

     ‘R = mvnrnd (MU, SIGMA, N, T)’ supplies the Cholesky factor T of
     SIGMA, so that SIGMA(:,:,J) == T(:,:,J)’*T(:,:,J) if SIGMA is a 3D
     array or SIGMA == T’*T if SIGMA is a matrix.  No error checking is
     done on T.

     ‘[R, T] = mvnrnd (...)’ returns the Cholesky factor T, so it can be
     re-used to make later calls more efficient, although there are
     greater efficiency gains when SIGMA can be specified as a diagonal
     instead.

     See also: mvncdf, mvnpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 57
Random vectors from the multivariate normal distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
mvtcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2751
 -- statistics: P = mvtcdf (X, RHO, DF)
 -- statistics: P = mvncdf (X_LO, X_UP, RHO, DF)
 -- statistics: P = mvncdf (..., OPTIONS)
 -- statistics: [P, ERR] = mvncdf (...)

     Multivariate Student’s t cumulative distribution function (CDF).

     ‘P = mvtcdf (X, RHO, DF)’ returns the cumulative probability of the
     multivariate student’s t distribution with correlation parameters
     RHO and degrees of freedom DF, evaluated at each row of X.  The
     rows of the NxD matrix X correspond to sample observations and its
     columns correspond to variables or coordinates.  The return
     argument P is a column vector with the same number of rows as in X.

     RHO is a symmetric, positive definite, DxD correlation matrix.  DF
     is a scalar or a vector with N elements.

     Note: ‘mvtcdf’ computes the CDF for the standard multivariate
     Student’s t distribution, centered at the origin, with no scale
     parameters.  If RHO is a covariance matrix, i.e.  ‘diag(RHO)’ is
     not all ones, ‘mvtcdf’ rescales RHO to transform it to a
     correlation matrix.  ‘mvtcdf’ does not rescale X, though.

     The multivariate Student’s t cumulative probability at X is defined
     as the probability that a random vector T, distributed as
     multivariate normal, will fall within the semi-infinite rectangle
     with upper limits defined by X.
        • Pr{T(1)<=X(1), T(2)<=X(2), ... T(D)<=X(D)}.

     ‘P = mvtcdf (X_LO, X_HI, RHO, DF)’ returns the multivariate
     Student’s t cumulative probability evaluated over the rectangle
     (hyper-rectangle for multivariate data in X) with lower and upper
     limits defined by X_LO and X_HI, respectively.

     ‘[P, ERR] = mvtcdf (...)’ also returns an error estimate ERR in P.

     ‘P = mvtcdf (..., OPTIONS)’ specifies the structure, which controls
     specific parameters for the numerical integration used to compute
     P.  The required fieds are:

     "TolFun"            Maximum absolute error tolerance.  Default is 1e-8
                         for D < 4, or 1e-4 for D >= 4.
                         
     "MaxFunEvals"       Maximum number of integrand evaluations when D >= 4.
                         Default is 1e7.  Ignored when D < 4.
                         
     "Display"           Display options.  Choices are "off" (default),
                         "iter", which shows the probability and estimated
                         error at each repetition, and "final", which shows
                         the final probability and related error after the
                         integrand has converged successfully.  Ignored when
                         D < 4.

     See also: bvtcdf, mvtpdf, mvtrnd, mvtcdfqmc.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 66
Multivariate Student’s t cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
mvtcdfqmc


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1399
 -- statistics: P = mvtcdfqmc (A, B, RHO, DF)
 -- statistics: P = mvtcdfqmc (..., TOLFUN)
 -- statistics: P = mvtcdfqmc (..., TOLFUN, MAXFUNEVALS)
 -- statistics: P = mvtcdfqmc (..., TOLFUN, MAXFUNEVALS, DISPLAY)
 -- statistics: [P, ERR] = mvtcdfqmc (...)
 -- statistics: [P, ERR, FUNEVALS] = mvtcdfqmc (...)

     Quasi-Monte-Carlo computation of the multivariate Student’s T CDF.

     The QMC multivariate Student’s t distribution is evaluated between
     the lower limit A and upper limit B of the hyper-rectangle with a
     correlation matrix RHO and degrees of freedom DF.

     "TolFun"       — Maximum absolute error tolerance.  Default is 1e-4.
     "MaxFunEvals"  — Maximum number of integrand evaluations.  Default is
                    1e7 for D > 4.
     "Display"      — Display options.  Choices are "off" (default), "iter",
                    which shows the probability and estimated error at each
                    repetition, and "final", which shows the final
                    probability and related error after the integrand has
                    converged successfully.

     ‘[P, ERR, FUNEVALS] = mvtcdfqmc (...)’ returns the estimated
     probability, P, an estimate of the error, ERR, and the number of
     iterations until a successful convergence is met, unless the value
     in MAXFUNEVALS was reached.

     See also: mvtcdf, mvtpdf, mvtrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
Quasi-Monte-Carlo computation of the multivariate Student’s T CDF.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
mvtpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1033
 -- statistics: Y = mvtpdf (X, RHO, DF)

     Multivariate Student’s t probability density function (PDF).

     Arguments
     ---------

        • X are the points at which to find the probability, where each
          row corresponds to an observation.  (NxD matrix)

        • RHO is the correlation matrix.  (DxD symmetric positive
          definite matrix)

        • DF is the degrees of freedom.  (scalar or vector of length N)

     The distribution is assumed to be centered (zero mean).

     Return values
     -------------

        • Y is the probability density for each row of X.  (Nx1 vector)

     Examples
     --------

          x = [1 2];
          rho = [1.0 0.5; 0.5 1.0];
          df = 4;
          y = mvtpdf (x, rho, df)

     References
     ----------

       1. Michael Roth, On the Multivariate t Distribution, Technical
          report from Automatic Control at Linkoepings universitet,
          <http://users.isy.liu.se/en/rt/roth/student.pdf>

     See also: mvtcdf, mvtcdfqmc, mvtrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 62
Multivariate Student’s t probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
mvtrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2080
 -- statistics: R = mvtrnd (RHO, DF)
 -- statistics: R = mvtrnd (RHO, DF, N)

     Random vectors from the multivariate Student’s t distribution.

     Arguments
     ---------

        • RHO is the matrix of correlation coefficients.  If there are
          any non-unit diagonal elements then RHO will be normalized, so
          that the resulting covariance of the obtained samples R
          follows: ‘cov (r) = df/(df-2) * rho ./ (sqrt (diag (rho) *
          diag (rho)))’.  In order to obtain samples distributed
          according to a standard multivariate student’s t-distribution,
          RHO must be equal to the identity matrix.  To generate
          multivariate student’s t-distribution samples R with arbitrary
          covariance matrix RHO, the following scaling might be used: ‘r
          = mvtrnd (rho, df, n) * diag (sqrt (diag (rho)))’.

        • DF is the degrees of freedom for the multivariate
          t-distribution.  DF must be a vector with the same number of
          elements as samples to be generated or be scalar.

        • N is the number of rows of the matrix to be generated.  N must
          be a non-negative integer and corresponds to the number of
          samples to be generated.

     Return values
     -------------

        • R is a matrix of random samples from the multivariate
          t-distribution with N row samples.

     Examples
     --------

          rho = [1, 0.5; 0.5, 1];
          df = 3;
          n = 10;
          r = mvtrnd (rho, df, n);

          rho = [1, 0.5; 0.5, 1];
          df = [2; 3];
          n = 2;
          r = mvtrnd (rho, df, 2);

     References
     ----------

       1. Wendy L. Martinez and Angel R. Martinez.  ‘Computational
          Statistics Handbook with MATLAB’. Appendix E, pages 547-557,
          Chapman & Hall/CRC, 2001.

       2. Samuel Kotz and Saralees Nadarajah.  ‘Multivariate t
          Distributions and Their Applications’.  Cambridge University
          Press, Cambridge, 2004.

     See also: mvtcdf, mvtcdfqmc, mvtpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 64
Random vectors from the multivariate Student’s t distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nakacdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 958
 -- statistics: P = nakacdf (X, MU, OMEGA)
 -- statistics: P = nakacdf (X, MU, OMEGA, "upper")

     Nakagami cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Nakagami distribution with shape parameter MU and
     spread parameter OMEGA.  The size of P is the common size of X, MU,
     and OMEGA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters must be positive reals and MU >= 0.5.  For MU < 0.5
     or OMEGA <= 0, NaN is returned.

     ‘P = nakacdf (X, MU, OMEGA, "upper")’ computes the upper tail
     probability of the Nakagami distribution with parameters MU and
     BETA, at the values in X.

     Further information about the Nakagami distribution can be found at
     <https://en.wikipedia.org/wiki/Nakagami_distribution>

     See also: nakainv, nakapdf, nakarnd, nakafit, nakalike, nakastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Nakagami cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nakainv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 745
 -- statistics: X = nakacdf (X, MU, OMEGA)

     Inverse of the Nakagami cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Nakagami distribution with shape parameter MU and
     spread parameter OMEGA.  The size of X is the common size of X, MU,
     and OMEGA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters must be positive reals and MU >= 0.5.  For MU < 0.5
     or OMEGA <= 0, NaN is returned.

     Further information about the Nakagami distribution can be found at
     <https://en.wikipedia.org/wiki/Nakagami_distribution>

     See also: nakacdf, nakapdf, nakarnd, nakafit, nakalike, nakastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 64
Inverse of the Nakagami cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nakapdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 726
 -- statistics: Y = nakapdf (X, MU, OMEGA)

     Nakagami probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Nakagami distribution with shape parameter MU and
     spread parameter OMEGA.  The size of Y is the common size of X, MU,
     and OMEGA.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     Both parameters must be positive reals and MU >= 0.5.  For MU < 0.5
     or OMEGA <= 0, NaN is returned.

     Further information about the Nakagami distribution can be found at
     <https://en.wikipedia.org/wiki/Nakagami_distribution>

     See also: nakacdf, nakapdf, nakarnd, nakafit, nakalike, nakastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Nakagami probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nakarnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1262
 -- statistics: R = nakarnd (MU, OMEGA)
 -- statistics: R = nakarnd (MU, OMEGA, ROWS)
 -- statistics: R = nakarnd (MU, OMEGA, ROWS, COLS, ...)
 -- statistics: R = nakarnd (MU, OMEGA, [SZ])

     Random arrays from the Nakagami distribution.

     ‘R = nakarnd (MU, OMEGA)’ returns an array of random numbers chosen
     from the Nakagami distribution with shape parameter MU and spread
     parameter OMEGA.  The size of R is the common size of MU and OMEGA.
     A scalar input functions as a constant matrix of the same size as
     the other inputs.

     Both parameters must be positive reals and MU >= 0.5.  For MU < 0.5
     or OMEGA <= 0, NaN is returned.

     When called with a single size argument, ‘nakarnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Nakagami distribution can be found at
     <https://en.wikipedia.org/wiki/Nakagami_distribution>

     See also: nakacdf, nakainv, nakapdf, nakafit, nakalike, nakastat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Random arrays from the Nakagami distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nbincdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2287
 -- statistics: P = nbincdf (X, R, PS)
 -- statistics: P = nbincdf (X, R, PS, "upper")

     Negative binomial cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the negative binomial distribution with parameters R and
     PS, where R is the number of successes until the experiment is
     stopped and PS is the probability of success in each experiment,
     given the number of failures in X.  The size of P is the common
     size of X, R, and PS.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     The algorithm uses the cumulative sums of the binomial masses.

     ‘P = nbincdf (X, R, PS, "upper")’ computes the upper tail
     probability of the negative binomial distribution with parameters R
     and PS, at the values in X.

     When R is an integer, the negative binomial distribution is also
     known as the Pascal distribution and it models the number of
     failures in X before a specified number of successes is reached in
     a series of independent, identical trials.  Its parameters are the
     probability of success in a single trial, PS, and the number of
     successes, R.  A special case of the negative binomial
     distribution, when R = 1, is the geometric distribution, which
     models the number of failures before the first success.

     R can also have non-integer positive values, in which form the
     negative binomial distribution, also known as the Polya
     distribution, has no interpretation in terms of repeated trials,
     but, like the Poisson distribution, it is useful in modeling count
     data.  The negative binomial distribution is more general than the
     Poisson distribution because it has a variance that is greater than
     its mean, making it suitable for count data that do not meet the
     assumptions of the Poisson distribution.  In the limit, as R
     increases to infinity, the negative binomial distribution
     approaches the Poisson distribution.

     Further information about the negative binomial distribution can be
     found at
     <https://en.wikipedia.org/wiki/Negative_binomial_distribution>

     See also: nbininv, nbinpdf, nbinrnd, nbinfit, nbinlike, nbinstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 57
Negative binomial cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nbininv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2005
 -- statistics: X = nbininv (P, R, PS)

     Inverse of the negative binomial cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the negative binomial distribution with parameters R and
     PS, where R is the number of successes until the experiment is
     stopped and PS is the probability of success in each experiment,
     given the probability in P.  The size of X is the common size of P,
     R, and PS.  A scalar input functions as a constant matrix of the
     same size as the other inputs.

     When R is an integer, the negative binomial distribution is also
     known as the Pascal distribution and it models the number of
     failures in X before a specified number of successes is reached in
     a series of independent, identical trials.  Its parameters are the
     probability of success in a single trial, PS, and the number of
     successes, R.  A special case of the negative binomial
     distribution, when R = 1, is the geometric distribution, which
     models the number of failures before the first success.

     R can also have non-integer positive values, in which form the
     negative binomial distribution, also known as the Polya
     distribution, has no interpretation in terms of repeated trials,
     but, like the Poisson distribution, it is useful in modeling count
     data.  The negative binomial distribution is more general than the
     Poisson distribution because it has a variance that is greater than
     its mean, making it suitable for count data that do not meet the
     assumptions of the Poisson distribution.  In the limit, as R
     increases to infinity, the negative binomial distribution
     approaches the Poisson distribution.

     Further information about the negative binomial distribution can be
     found at
     <https://en.wikipedia.org/wiki/Negative_binomial_distribution>

     See also: nbininv, nbinpdf, nbinrnd, nbinfit, nbinlike, nbinstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 73
Inverse of the negative binomial cumulative distribution function
(iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nbinpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1993
 -- statistics: Y = nbinpdf (X, R, PS)

     Negative binomial probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) at X of the negative binomial distribution with parameters R
     and PS, where R is the number of successes until the experiment is
     stopped and PS is the probability of success in each experiment,
     given the number of failures in X.  The size of Y is the common
     size of X, R, and PS.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     When R is an integer, the negative binomial distribution is also
     known as the Pascal distribution and it models the number of
     failures in X before a specified number of successes is reached in
     a series of independent, identical trials.  Its parameters are the
     probability of success in a single trial, PS, and the number of
     successes, R.  A special case of the negative binomial
     distribution, when R = 1, is the geometric distribution, which
     models the number of failures before the first success.

     R can also have non-integer positive values, in which form the
     negative binomial distribution, also known as the Polya
     distribution, has no interpretation in terms of repeated trials,
     but, like the Poisson distribution, it is useful in modeling count
     data.  The negative binomial distribution is more general than the
     Poisson distribution because it has a variance that is greater than
     its mean, making it suitable for count data that do not meet the
     assumptions of the Poisson distribution.  In the limit, as R
     increases to infinity, the negative binomial distribution
     approaches the Poisson distribution.

     Further information about the negative binomial distribution can be
     found at
     <https://en.wikipedia.org/wiki/Negative_binomial_distribution>

     See also: nbininv, nbininv, nbinrnd, nbinfit, nbinlike, nbinstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Negative binomial probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
nbinrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2500
 -- statistics: RND = nbinrnd (R, PS)
 -- statistics: RND = nbinrnd (R, PS, ROWS)
 -- statistics: RND = nbinrnd (R, PS, ROWS, COLS, ...)
 -- statistics: RND = nbinrnd (R, PS, [SZ])

     Random arrays from the negative binomial distribution.

     ‘RND = nbinrnd (R, PS)’ returns an array of random numbers chosen
     from the negative binomial distribution with parameters R and PS,
     where R is the number of successes until the experiment is stopped
     and PS is the probability of success in each experiment, given the
     number of failures in X.  The size of RND is the common size of R
     and PS.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     When called with a single size argument, return a square matrix
     with the dimension specified.  When called with more than one
     scalar argument the first two arguments are taken as the number of
     rows and columns and any further arguments specify additional
     matrix dimensions.  The size may also be specified with a vector of
     dimensions SZ.

     When R is an integer, the negative binomial distribution is also
     known as the Pascal distribution and it models the number of
     failures in X before a specified number of successes is reached in
     a series of independent, identical trials.  Its parameters are the
     probability of success in a single trial, PS, and the number of
     successes, R.  A special case of the negative binomial
     distribution, when R = 1, is the geometric distribution, which
     models the number of failures before the first success.

     R can also have non-integer positive values, in which form the
     negative binomial distribution, also known as the Polya
     distribution, has no interpretation in terms of repeated trials,
     but, like the Poisson distribution, it is useful in modeling count
     data.  The negative binomial distribution is more general than the
     Poisson distribution because it has a variance that is greater than
     its mean, making it suitable for count data that do not meet the
     assumptions of the Poisson distribution.  In the limit, as R
     increases to infinity, the negative binomial distribution
     approaches the Poisson distribution.

     Further information about the negative binomial distribution can be
     found at
     <https://en.wikipedia.org/wiki/Negative_binomial_distribution>

     See also: nbininv, nbininv, nbinpdf, nbinfit, nbinlike, nbinstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Random arrays from the negative binomial distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncfcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 904
 -- statistics: P = ncfcdf (X, DF1, DF2, LAMBDA)
 -- statistics: P = ncfcdf (X, DF1, DF2, LAMBDA, "upper")

     Noncentral F-cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the noncentral F-distribution with DF1 and DF2 degrees of
     freedom and noncentrality parameter LAMBDA.  The size of P is the
     common size of X, DF1, DF2, and LAMBDA.  A scalar input functions
     as a constant matrix of the same size as the other inputs.

     ‘P = ncfcdf (X, DF1, DF2, LAMBDA, "upper")’ computes the upper tail
     probability of the noncentral F-distribution with parameters DF1,
     DF2, and LAMBDA, at the values in X.

     Further information about the noncentral F-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_F-distribution>

     See also: ncfinv, ncfpdf, ncfrnd, ncfstat, fcdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 52
Noncentral F-cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncfinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 742
 -- statistics: X = ncfinv (P, DF1, DF2, LAMBDA)

     Inverse of the noncentral F-cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the noncentral F-distribution with DF1 and DF2 degrees of
     freedom and noncentrality parameter LAMBDA.  The size of X is the
     common size of P, DF1, DF2, and LAMBDA.  A scalar input functions
     as a constant matrix of the same size as the other inputs.

     ‘ncfinv’ uses Newton’s method to converge to the solution.

     Further information about the noncentral F-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_F-distribution>

     See also: ncfcdf, ncfpdf, ncfrnd, ncfstat, finv.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
Inverse of the noncentral F-cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncfpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 647
 -- statistics: Y = ncfpdf (X, DF1, DF2, LAMBDA)

     Noncentral F-probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the noncentral F-distribution with DF1 and DF2 degrees of
     freedom and noncentrality parameter LAMBDA.  The size of Y is the
     common size of X, DF1, DF2, and LAMBDA.  A scalar input functions
     as a constant matrix of the same size as the other inputs.

     Further information about the noncentral F-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_F-distribution>

     See also: ncfcdf, ncfinv, ncfrnd, ncfstat, fpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Noncentral F-probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncfrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1374
 -- statistics: R = ncfrnd (DF1, DF2, LAMBDA)
 -- statistics: R = ncfrnd (DF1, DF2, LAMBDA, ROWS, COLS, ...)
 -- statistics: R = ncfrnd (DF1, DF2, LAMBDA, [SZ])

     Random arrays from the noncentral F-distribution.

     ‘X = ncfrnd (P, DF1, DF2, LAMBDA)’ returns an array of random
     numbers chosen from the noncentral F-distribution with DF1 and DF2
     degrees of freedom and noncentrality parameter LAMBDA.  The size of
     R is the common size of DF1, DF2, and LAMBDA.  A scalar input
     functions as a constant matrix of the same size as the other input.

     ‘ncfrnd’ generates values using the definition of a noncentral F
     random variable, as the ratio of a noncentral chi-squared
     distribution and a (central) chi-squared distribution.

     When called with a single size argument, ‘ncfrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the noncentral F-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_F-distribution>

     See also: ncfcdf, ncfinv, ncfpdf, ncfstat, frnd, ncx2rnd, chi2rnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Random arrays from the noncentral F-distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
nctcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 840
 -- statistics: P = nctcdf (X, DF, MU)
 -- statistics: P = nctcdf (X, DF, MU, "upper")

     Noncentral t-cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the noncentral t-distribution with DF degrees of freedom
     and noncentrality parameter MU.  The size of P is the common size
     of X, DF, and MU.  A scalar input functions as a constant matrix of
     the same size as the other inputs.

     ‘P = nctcdf (X, DF, MU, "upper")’ computes the upper tail
     probability of the noncentral t-distribution with parameters DF and
     MU, at the values in X.

     Further information about the noncentral t-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_t-distribution>

     See also: nctinv, nctpdf, nctrnd, nctstat, tcdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 52
Noncentral t-cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
nctinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 711
 -- statistics: X = ncx2inv (P, DF, MU)

     Inverse of the non-central t-cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the noncentral t-distribution with DF degrees of freedom
     and noncentrality parameter MU.  The size of X is the common size
     of P, DF, and MU.  A scalar input functions as a constant matrix of
     the same size as the other inputs.

     ‘nctinv’ uses Newton’s method to converge to the solution.

     Further information about the noncentral t-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_t-distribution>

     See also: nctcdf, nctpdf, nctrnd, nctstat, tinv.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
Inverse of the non-central t-cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
nctpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 614
 -- statistics: Y = nctpdf (X, DF, MU)

     Noncentral t-probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the noncentral t-distribution with DF degrees of freedom
     and noncentrality parameter MU.  The size of Y is the common size
     of X, DF, and MU.  A scalar input functions as a constant matrix of
     the same size as the other inputs.

     Further information about the noncentral t-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_t-distribution>

     See also: nctcdf, nctinv, nctrnd, nctstat, tpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Noncentral t-probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
nctrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1315
 -- statistics: R = nctrnd (DF, MU)
 -- statistics: R = nctrnd (DF, MU, ROWS, COLS, ...)
 -- statistics: R = nctrnd (DF, MU, [SZ])

     Random arrays from the noncentral t-distribution.

     ‘X = nctrnd (P, DF, MU)’ returns an array of random numbers chosen
     from the noncentral t-distribution with DF degrees of freedom and
     noncentrality parameter MU.  The size of R is the common size of DF
     and MU.  A scalar input functions as a constant matrix of the same
     size as the other input.

     ‘nctrnd’ generates values using the definition of a noncentral t
     random variable, as the ratio of a normal distribution with
     non-zero mean and the sqrt of a chi-squared distribution.

     When called with a single size argument, ‘nctrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the noncentral t-distribution can be
     found at <https://en.wikipedia.org/wiki/Noncentral_t-distribution>

     See also: nctcdf, nctinv, nctpdf, nctstat, trnd, normrnd, chi2rnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Random arrays from the noncentral t-distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ncx2cdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 929
 -- statistics: P = ncx2cdf (X, DF, LAMBDA)
 -- statistics: P = ncx2cdf (X, DF, LAMBDA, "upper")

     Noncentral chi-squared cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the noncentral chi-squared distribution with DF degrees of
     freedom and noncentrality parameter LAMBDA.  The size of P is the
     common size of X, DF, and LAMBDA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     ‘P = ncx2cdf (X, DF, LAMBDA, "upper")’ computes the upper tail
     probability of the noncentral chi-squared distribution with
     parameters DF and LAMBDA, at the values in X.

     Further information about the noncentral chi-squared distribution
     can be found at
     <https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution>

     See also: ncx2inv, ncx2pdf, ncx2rnd, ncx2stat, chi2cdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 62
Noncentral chi-squared cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ncx2inv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 767
 -- statistics: X = ncx2inv (P, DF, LAMBDA)

     Inverse of the noncentral chi-squared cumulative distribution
     function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the noncentral chi-squared distribution with DF degrees of
     freedom and noncentrality parameter MU.  The size of X is the
     common size of P, DF, and MU.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     ‘ncx2inv’ uses Newton’s method to converge to the solution.

     Further information about the noncentral chi-squared distribution
     can be found at
     <https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution>

     See also: ncx2cdf, ncx2pdf, ncx2rnd, ncx2stat, chi2inv.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 78
Inverse of the noncentral chi-squared cumulative distribution function
(iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ncx2pdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 684
 -- statistics: Y = ncx2pdf (X, DF, LAMBDA)

     Noncentral chi-squared probability distribution function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the noncentral chi-squared distribution with DF degrees of
     freedom and noncentrality parameter LAMBDA.  The size of Y is the
     common size of X, DF, and LAMBDA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Further information about the noncentral chi-squared distribution
     can be found at
     <https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution>

     See also: ncx2cdf, ncx2inv, ncx2rnd, ncx2stat, chi2pdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Noncentral chi-squared probability distribution function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ncx2rnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1163
 -- statistics: R = ncx2rnd (DF, LAMBDA)
 -- statistics: R = ncx2rnd (DF, LAMBDA, ROWS, COLS, ...)
 -- statistics: R = ncx2rnd (DF, LAMBDA, [SZ])

     Random arrays from the noncentral chi-squared distribution.

     ‘R = ncx2rnd (DF, LAMBDA)’ returns an array of random numbers
     chosen from the noncentral chi-squared distribution with DF degrees
     of freedom and noncentrality parameter LAMBDA.  The size of R is
     the common size of DF and LAMBDA.  A scalar input functions as a
     constant matrix of the same size as the other input.

     When called with a single size argument, ‘ncx2rnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the noncentral chi-squared distribution
     can be found at
     <https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution>

     See also: ncx2cdf, ncx2inv, ncx2pdf, ncx2stat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 59
Random arrays from the noncentral chi-squared distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
normcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1780
 -- statistics: P = normcdf (X)
 -- statistics: P = normcdf (X, MU)
 -- statistics: P = normcdf (X, MU, SIGMA)
 -- statistics: P = normcdf (..., "upper")
 -- statistics: [P, PLO, PUP] = normcdf (X, MU, SIGMA, PCOV)
 -- statistics: [P, PLO, PUP] = normcdf (X, MU, SIGMA, PCOV, ALPHA)
 -- statistics: [P, PLO, PUP] = normcdf (..., "upper")

     Normal cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the normal distribution with mean MU and standard
     deviation SIGMA.  The size of P is the common size of X, MU and
     SIGMA.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     Default values are MU = 0, SIGMA = 1.

     When called with three output arguments, i.e.  [P, PLO, PUP],
     ‘normcdf’ computes the confidence bounds for P when the input
     parameters MU and SIGMA are estimates.  In such case, PCOV, a 2x2
     matrix containing the covariance matrix of the estimated
     parameters, is necessary.  Optionally, ALPHA, which has a default
     value of 0.05, specifies the 100 * (1 - ALPHA) percent confidence
     bounds.  PLO and PUP are arrays of the same size as P containing
     the lower and upper confidence bounds.

     ‘[...] = normcdf (..., "upper")’ computes the upper tail
     probability of the normal distribution with parameters MU and
     SIGMA, at the values in X.  This can be used to compute a
     right-tailed p-value.  To compute a two-tailed p-value, use ‘2 *
     normcdf (-abs (X), MU, SIGMA)’.

     Further information about the normal distribution can be found at
     <https://en.wikipedia.org/wiki/Normal_distribution>

     See also: norminv, normpdf, normrnd, normfit, normlike, normstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Normal cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
norminv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 975
 -- statistics: X = norminv (P)
 -- statistics: X = norminv (P, MU)
 -- statistics: X = norminv (P, MU, SIGMA)

     Inverse of the normal cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the normal distribution with mean MU and standard deviation
     SIGMA.  The size of P is the common size of P, MU and SIGMA.  A
     scalar input functions as a constant matrix of the same size as the
     other inputs.

     Default values are MU = 0, SIGMA = 1.

     The default values correspond to the standard normal distribution
     and computing its quantile function is also possible with the
     ‘probit’ function, which is faster but it does not perform any
     input validation.

     Further information about the normal distribution can be found at
     <https://en.wikipedia.org/wiki/Normal_distribution>

     See also: norminv, normpdf, normrnd, normfit, normlike, normstat,
     probit.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 62
Inverse of the normal cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
normpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 709
 -- statistics: Y = normpdf (X)
 -- statistics: Y = normpdf (X, MU)
 -- statistics: Y = normpdf (X, MU, SIGMA)

     Normal probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the normal distribution with mean MU and standard
     deviation SIGMA.  The size of Y is the common size of P, MU and
     SIGMA.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     Default values are MU = 0, SIGMA = 1.

     Further information about the normal distribution can be found at
     <https://en.wikipedia.org/wiki/Normal_distribution>

     See also: norminv, norminv, normrnd, normfit, normlike, normstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Normal probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
normrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1227
 -- statistics: R = normrnd (MU, SIGMA)
 -- statistics: R = normrnd (MU, SIGMA, ROWS)
 -- statistics: R = normrnd (MU, SIGMA, ROWS, COLS, ...)
 -- statistics: R = normrnd (MU, SIGMA, [SZ])

     Random arrays from the normal distribution.

     ‘R = normrnd (MU, SIGMA)’ returns an array of random numbers chosen
     from the normal distribution with mean MU and standard deviation
     SIGMA.  The size of R is the common size of MU and SIGMA.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.  Both parameters must be finite real numbers and SIGMA > 0,
     otherwise NaN is returned.

     When called with a single size argument, ‘normrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the normal distribution can be found at
     <https://en.wikipedia.org/wiki/Normal_distribution>

     See also: norminv, norminv, normpdf, normfit, normlike, normstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Random arrays from the normal distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
plcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 900
 -- statistics: P = plcdf (DATA, X, FX)
 -- statistics: P = plcdf (DATA, X, FX, "upper")

     Piecewise linear cumulative distribution function (CDF).

     For each element of DATA, compute the cumulative distribution
     function (CDF) of the piecewise linear distribution with a vector
     of X values at which the CDF changes slope and a vector of CDF
     values FX that correspond to each value in X.  Both X and FX must
     be vectors of the same size and at least 2-elements long.  The size
     of P is the same as DATA.

     ‘P = plcdf (DATA, X, FX, "upper")’ computes the upper tail
     probability of the piecewise linear distribution with parameters X
     and FX, at the values in DATA.

     Further information about the piecewise linear distribution can be
     found at <https://en.wikipedia.org/wiki/Piecewise_linear_function>

     See also: plinv, plpdf, plrnd, plstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 56
Piecewise linear cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
plinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 667
 -- statistics: DATA = plinv (P, X, FX)

     Inverse of the piecewise linear distribution (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the piecewise linear distribution with a vector of X values
     at which the CDF changes slope and a vector of CDF values FX that
     correspond to each value in X.  Both X and FX must be vectors of
     the same_p size and at least 2-elements long..  The size of DATA is
     the same_p as P.

     Further information about the piecewise linear distribution can be
     found at <https://en.wikipedia.org/wiki/Piecewise_linear_function>

     See also: plcdf, plpdf, plrnd, plstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 52
Inverse of the piecewise linear distribution (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
plpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 666
 -- statistics: Y = plpdf (DATA, X, FX)

     Piecewise linear probability density function (PDF).

     For each element of DATA, compute the probability density function
     (PDF) of the piecewise linear distribution with a vector of X
     values at which the CDF changes slope and a vector of CDF values FX
     that correspond to each value in X.  Both X and FX must be vectors
     of the same size and at least 2-elements long.  The size of P is
     the same as DATA.

     Further information about the piecewise linear distribution can be
     found at <https://en.wikipedia.org/wiki/Piecewise_linear_function>

     See also: plcdf, plinv, plrnd, plstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 52
Piecewise linear probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
plrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1123
 -- statistics: R = plrnd (X, FX)
 -- statistics: R = plrnd (X, FX, ROWS)
 -- statistics: R = plrnd (X, FX, ROWS, COLS, ...)
 -- statistics: R = plrnd (X, FX, [SZ])

     Random arrays from the piecewise linear distribution.

     ‘R = plrnd (X, FX)’ returns a random number chosen from the
     piecewise linear distribution with a vector of X values at which
     the CDF changes slope and a vector of CDF values FX that correspond
     to each value in X.  Both X and FX must be vectors of the same size
     and at least 2-elements long.

     When called with a single size argument, ‘plrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the piecewise linear distribution can be
     found at <https://en.wikipedia.org/wiki/Piecewise_linear_function>

     See also: plcdf, plinv, plpdf, plstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Random arrays from the piecewise linear distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
poisscdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 812
 -- statistics: P = poisscdf (X, LAMBDA)
 -- statistics: P = poisscdf (X, LAMBDA, "upper")

     Poisson cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Poisson distribution with rate parameter LAMBDA.  The
     size of P is the common size of X and LAMBDA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     ‘P = poisscdf (X, LAMBDA, "upper")’ computes the upper tail
     probability of the Poisson distribution with parameter LAMBDA, at
     the values in X.

     Further information about the Poisson distribution can be found at
     <https://en.wikipedia.org/wiki/Poisson_distribution>

     See also: poissinv, poisspdf, poissrnd, poissfit, poisslike,
     poisstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Poisson cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
poissinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 610
 -- statistics: X = poissinv (P, LAMBDA)

     Inverse of the Poisson cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Poisson distribution with rate parameter LAMBDA.  The
     size of X is the common size of P and LAMBDA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Poisson distribution can be found at
     <https://en.wikipedia.org/wiki/Poisson_distribution>

     See also: poisscdf, poisspdf, poissrnd, poissfit, poisslike,
     poisstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Inverse of the Poisson cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
poisspdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 591
 -- statistics: Y = poisspdf (X, LAMBDA)

     Poisson probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Poisson distribution with rate parameter LAMBDA.  The
     size of Y is the common size of X and LAMBDA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Poisson distribution can be found at
     <https://en.wikipedia.org/wiki/Poisson_distribution>

     See also: poisscdf, poissinv, poissrnd, poissfit, poisslike,
     poisstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Poisson probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
poissrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1214
 -- statistics: R = poissrnd (LAMBDA)
 -- statistics: R = poissrnd (LAMBDA, ROWS)
 -- statistics: R = poissrnd (LAMBDA, ROWS, COLS, ...)
 -- statistics: R = poissrnd (LAMBDA, [SZ])

     Random arrays from the Poisson distribution.

     ‘R = normrnd (LAMBDA)’ returns an array of random numbers chosen
     from the Poisson distribution with rate parameter LAMBDA.  The size
     of R is the common size of LAMBDA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.  LAMBDA must
     be a finite real number and greater or equal to 0, otherwise NaN is
     returned.

     When called with a single size argument, ‘poissrnd’ returns a
     square matrix with the dimension specified.  When called with more
     than one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Poisson distribution can be found at
     <https://en.wikipedia.org/wiki/Poisson_distribution>

     See also: poisscdf, poissinv, poisspdf, poissfit, poisslike,
     poisstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Random arrays from the Poisson distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
raylcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 799
 -- statistics: P = raylcdf (X, SIGMA)
 -- statistics: P = raylcdf (X, SIGMA, "upper")

     Rayleigh cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Rayleigh distribution with scale parameter SIGMA.  The
     size of P is the common size of X and SIGMA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     ‘P = raylcdf (X, SIGMA, "upper")’ computes the upper tail
     probability of the Rayleigh distribution with parameter SIGMA, at
     the values in X.

     Further information about the Rayleigh distribution can be found at
     <https://en.wikipedia.org/wiki/Rayleigh_distribution>

     See also: raylinv, raylpdf, raylrnd, raylfit, rayllike, raylstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Rayleigh cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
raylinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 601
 -- statistics: X = raylinv (P, SIGMA)

     Inverse of the Rayleigh cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Rayleigh distribution with scale parameter SIGMA.  The
     size of X is the common size of P and SIGMA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Rayleigh distribution can be found at
     <https://en.wikipedia.org/wiki/Rayleigh_distribution>

     See also: raylcdf, raylpdf, raylrnd, raylfit, rayllike, raylstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 64
Inverse of the Rayleigh cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
raylpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 582
 -- statistics: Y = raylpdf (X, SIGMA)

     Rayleigh probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Rayleigh distribution with scale parameter SIGMA.  The
     size of P is the common size of X and SIGMA.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the Rayleigh distribution can be found at
     <https://en.wikipedia.org/wiki/Rayleigh_distribution>

     See also: raylcdf, raylinv, raylrnd, raylfit, rayllike, raylstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Rayleigh probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
raylrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1173
 -- statistics: R = raylrnd (SIGMA)
 -- statistics: R = raylrnd (SIGMA, ROWS)
 -- statistics: R = raylrnd (SIGMA, ROWS, COLS, ...)
 -- statistics: R = raylrnd (SIGMA, [SZ])

     Random arrays from the Rayleigh distribution.

     ‘R = raylrnd (SIGMA)’ returns an array of random numbers chosen
     from the Rayleigh distribution with scale parameter SIGMA.  The
     size of R is the size of SIGMA.  A scalar input functions as a
     constant matrix of the same size as the other inputs.  SIGMA must
     be a finite real number greater than 0, otherwise NaN is returned.

     When called with a single size argument, ‘raylrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Rayleigh distribution can be found at
     <https://en.wikipedia.org/wiki/Rayleigh_distribution>

     See also: raylcdf, raylinv, raylpdf, raylfit, rayllike, raylstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Random arrays from the Rayleigh distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ricecdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 849
 -- statistics: P = ricecdf (X, S, SIGMA)
 -- statistics: P = ricecdf (X, S, SIGMA, "upper")

     Rician cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Rician distribution with non-centrality (distance)
     parameter S and scale parameter SIGMA.  The size of P is the common
     size of X, S, and SIGMA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     ‘P = ricecdf (X, S, SIGMA, "upper")’ computes the upper tail
     probability of the Rician distribution with parameters S and SIGMA,
     at the values in X.

     Further information about the Rician distribution can be found at
     <https://en.wikipedia.org/wiki/Rice_distribution>

     See also: riceinv, ricepdf, ricernd, ricefit, ricelike, ricestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Rician cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
riceinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 620
 -- statistics: X = riceinv (P, S, SIGMA)

     Inverse of the Rician distribution (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Rician distribution with non-centrality (distance)
     parameter S and scale parameter SIGMA.  The size of X is the common
     size of X, S, and SIGMA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     Further information about the Rician distribution can be found at
     <https://en.wikipedia.org/wiki/Rice_distribution>

     See also: ricecdf, ricepdf, ricernd, ricefit, ricelike, ricestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Inverse of the Rician distribution (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ricepdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 621
 -- statistics: Y = ricepdf (X, S, SIGMA)

     Rician probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Rician distribution with non-centrality (distance)
     parameter S and scale parameter SIGMA.  The size of Y is the common
     size of X, S, and SIGMA.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     Further information about the Rician distribution can be found at
     <https://en.wikipedia.org/wiki/Rice_distribution>

     See also: ricecdf, riceinv, ricernd, ricefit, ricelike, ricestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Rician probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ricernd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1142
 -- statistics: R = ricernd (S, SIGMA)
 -- statistics: R = ricernd (S, SIGMA, ROWS)
 -- statistics: R = ricernd (S, SIGMA, ROWS, COLS, ...)
 -- statistics: R = ricernd (S, SIGMA, [SZ])

     Random arrays from the Rician distribution.

     ‘R = ricernd (S, SIGMA)’ returns an array of random numbers chosen
     from the Rician distribution with noncentrality parameter S and
     scale parameter SIGMA.  The size of R is the common size of S and
     SIGMA.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     When called with a single size argument, ‘ricernd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Rician distribution can be found at
     <https://en.wikipedia.org/wiki/Rice_distribution>

     See also: ricecdf, riceinv, ricepdf, ricefit, ricelike, ricestat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Random arrays from the Rician distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
tcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 771
 -- statistics: P = tcdf (X, DF)
 -- statistics: P = tcdf (X, DF, "upper")

     Student’s T cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Student’s T distribution with DF degrees of freedom.
     The size of P is the common size of X and DF.  A scalar input
     functions as a constant matrix of the same size as the other input.

     ‘P = tcdf (X, DF, "upper")’ computes the upper tail probability of
     the Student’s T distribution with DF degrees of freedom, at the
     values in X.

     Further information about the Student’s T distribution can be found
     at <https://en.wikipedia.org/wiki/Student%27s_t-distribution>

     See also: tinv, tpdf, trnd, tstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Student’s T cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
tinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 774
 -- statistics: X = tinv (P, DF)

     Inverse of the Student’s T cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Student’s T distribution with DF degrees of freedom.
     The size of X is the common size of X and DF.  A scalar input
     functions as a constant matrix of the same size as the other input.

     This function is analogous to looking in a table for the t-value of
     a single-tailed distribution.  For very large DF (>10000), the
     inverse of the standard normal distribution is used.

     Further information about the Student’s T distribution can be found
     at <https://en.wikipedia.org/wiki/Student%27s_t-distribution>

     See also: tcdf, tpdf, trnd, tstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
Inverse of the Student’s T cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
tlscdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1010
 -- statistics: P = tlscdf (X, MU, SIGMA, NU)
 -- statistics: P = tlscdf (X, MU, SIGMA, NU, "upper")

     Location-scale Student’s T cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the location-scale Student’s T distribution with location
     parameter MU, scale parameter SIGMA, and NU degrees of freedom.
     The size of P is the common size of X, MU, SIGMA, and NU.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     ‘P = tlscdf (X, MU, SIGMA, NU, "upper")’ computes the upper tail
     probability of the location-scale Student’s T distribution with
     parameters MU, SIGMA, and NU, at the values in X.

     Further information about the location-scale Student’s T
     distribution can be found at
     <https://en.wikipedia.org/wiki/Student%27s_t-distribution#Location-scale_t_distribution>

     See also: tlsinv, tlspdf, tlsrnd, tlsfit, tlslike, tlsstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
Location-scale Student’s T cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
tlsinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 770
 -- statistics: X = tlsinv (P, MU, SIGMA, NU)

     Inverse of the location-scale Student’s T cumulative distribution
     function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the location-scale Student’s T distribution with location
     parameter MU, scale parameter SIGMA, and NU degrees of freedom.
     The size of X is the common size of P, MU, SIGMA, and NU.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     Further information about the location-scale Student’s T
     distribution can be found at
     <https://en.wikipedia.org/wiki/Student%27s_t-distribution#Location-scale_t_distribution>

     See also: tlscdf, tlspdf, tlsrnd, tlsfit, tlslike, tlsstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Inverse of the location-scale Student’s T cumulative distribution
function ...



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
tlspdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 746
 -- statistics: P = tlspdf (X, MU, SIGMA, NU)

     Location-scale Student’s T probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the location-scale Student’s T distribution with location
     parameter MU, scale parameter SIGMA, and NU degrees of freedom.
     The size of Y is the common size of X, MU, SIGMA, and NU.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     Further information about the location-scale Student’s T
     distribution can be found at
     <https://en.wikipedia.org/wiki/Student%27s_t-distribution#Location-scale_t_distribution>

     See also: tlscdf, tlsinv, tlsrnd, tlsfit, tlslike, tlsstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 64
Location-scale Student’s T probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
tlsrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1464
 -- statistics: R = tlsrnd (MU, SIGMA, NU)
 -- statistics: R = tlsrnd (MU, SIGMA, NU, ROWS)
 -- statistics: R = tlsrnd (MU, SIGMA, NU, ROWS, COLS, ...)
 -- statistics: R = tlsrnd (MU, SIGMA, NU, [SZ])

     Random arrays from the location-scale Student’s T distribution.

     Return a matrix of random samples from the location-scale Student’s
     T distribution with location parameter MU, scale parameter SIGMA,
     and NU degrees of freedom.

     ‘R = tlsrnd (NU)’ returns an array of random numbers chosen from
     the location-scale Student’s T distribution with location parameter
     MU, scale parameter SIGMA, and NU degrees of freedom.  The size of
     R is the common size of MU, SIGMA, and NU.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     When called with a single size argument, ‘tlsrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the location-scale Student’s T
     distribution can be found at
     <https://en.wikipedia.org/wiki/Student%27s_t-distribution#Location-scale_t_distribution>

     See also: tlscdf, tlsinv, tlspdf, tlsfit, tlslike, tlsstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 65
Random arrays from the location-scale Student’s T distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
tpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 555
 -- statistics: P = tpdf (X, DF)

     Student’s T probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Student’s T distribution with DF degrees of freedom.
     The size of Y is the common size of X and DF.  A scalar input
     functions as a constant matrix of the same size as the other input.

     Further information about the Student’s T distribution can be found
     at <https://en.wikipedia.org/wiki/Student%27s_t-distribution>

     See also: tcdf, tpdf, trnd, tstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Student’s T probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
tricdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1379
 -- statistics: P = tricdf (X, A, B, C)
 -- statistics: P = tricdf (X, A, B, C, "upper")

     Triangular cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the triangular distribution with lower limit parameter A,
     peak location (mode) parameter B, and upper limit parameter C.  The
     size of P is the common size of the input arguments.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     ‘P = tricdf (X, A, B, C, "upper")’ computes the upper tail
     probability of the triangular distribution with parameters A, B,
     and C, at the values in X.

     Note that the order of the parameter input arguments has been
     changed after statistics version 1.6.3 in order to be MATLAB
     compatible with the parameters used in the TriangularDistribution
     probability distribution object.  More specifically, the positions
     of the parameters B and C have been swapped.  As a result, the
     naming conventions no longer coinside with those used in Wikipedia,
     in which b denotes the upper limit and c denotes the mode or peak
     parameter.

     Further information about the triangular distribution can be found
     at <https://en.wikipedia.org/wiki/Triangular_distribution>

     See also: triinv, tripdf, trirnd, tristat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Triangular cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
triinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1170
 -- statistics: X = triinv (P, A, B, C)

     Inverse of the triangular cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the triangular distribution with lower limit parameter A,
     peak location (mode) parameter B, and upper limit parameter C.  The
     size of X is the common size of the input arguments.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     Note that the order of the parameter input arguments has been
     changed after statistics version 1.6.3 in order to be MATLAB
     compatible with the parameters used in the TriangularDistribution
     probability distribution object.  More specifically, the positions
     of the parameters B and C have been swapped.  As a result, the
     naming conventions no longer coinside with those used in Wikipedia,
     in which b denotes the upper limit and c denotes the mode or peak
     parameter.

     Further information about the triangular distribution can be found
     at <https://en.wikipedia.org/wiki/Triangular_distribution>

     See also: tricdf, tripdf, trirnd, tristat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 66
Inverse of the triangular cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
tripdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1151
 -- statistics: Y = tripdf (X, A, B, C)

     Triangular probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the triangular distribution with lower limit parameter A,
     peak location (mode) parameter B, and upper limit parameter C.  The
     size of Y is the common size of the input arguments.  A scalar
     input functions as a constant matrix of the same size as the other
     inputs.

     Note that the order of the parameter input arguments has been
     changed after statistics version 1.6.3 in order to be MATLAB
     compatible with the parameters used in the TriangularDistribution
     probability distribution object.  More specifically, the positions
     of the parameters B and C have been swapped.  As a result, the
     naming conventions no longer coinside with those used in Wikipedia,
     in which b denotes the upper limit and c denotes the mode or peak
     parameter.

     Further information about the triangular distribution can be found
     at <https://en.wikipedia.org/wiki/Triangular_distribution>

     See also: tricdf, triinv, trirnd, tristat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Triangular probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
trirnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1664
 -- statistics: R = trirnd (A, B, C)
 -- statistics: R = trirnd (A, B, C, ROWS)
 -- statistics: R = trirnd (A, B, C, ROWS, COLS, ...)
 -- statistics: R = trirnd (A, B, C, [SZ])

     Random arrays from the triangular distribution.

     ‘R = trirnd (SIGMA)’ returns an array of random numbers chosen from
     the triangular distribution with lower limit parameter A, peak
     location (mode) parameter B, and upper limit parameter C.  The size
     of R is the common size of A, B, and C.  A scalar input functions
     as a constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘trirnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Note that the order of the parameter input arguments has been
     changed after statistics version 1.6.3 in order to be MATLAB
     compatible with the parameters used in the TriangularDistribution
     probability distribution object.  More specifically, the positions
     of the parameters B and C have been swapped.  As a result, the
     naming conventions no longer coinside with those used in Wikipedia,
     in which b denotes the upper limit and c denotes the mode or peak
     parameter.

     Further information about the triangular distribution can be found
     at <https://en.wikipedia.org/wiki/Triangular_distribution>

     See also: tricdf, triinv, tripdf, tristat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Random arrays from the triangular distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
trnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1233
 -- statistics: R = trnd (DF)
 -- statistics: R = trnd (DF, ROWS)
 -- statistics: R = trnd (DF, ROWS, COLS, ...)
 -- statistics: R = trnd (DF, [SZ])

     Random arrays from the Student’s T distribution.

     Return a matrix of random samples from the Students’s T
     distribution with DF degrees of freedom.

     ‘R = trnd (DF)’ returns an array of random numbers chosen from the
     Student’s T distribution with DF degrees of freedom.  The size of R
     is the size of DF.  A scalar input functions as a constant matrix
     of the same size as the other inputs.  DF must be a finite real
     number greater than 0, otherwise NaN is returned.

     When called with a single size argument, ‘trnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Student’s T distribution can be found
     at <https://en.wikipedia.org/wiki/Student%27s_t-distribution>

     See also: tcdf, tpdf, tpdf, tstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Random arrays from the Student’s T distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unidcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1229
 -- statistics: P = unidcdf (X, N)
 -- statistics: P = unidcdf (X, N, "upper")

     Discrete uniform cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of a discrete uniform distribution with parameter N, which
     corresponds to the maximum observable value.  ‘unidcdf’ assumes the
     integer values in the range [1,N] with equal probability.  The size
     of P is the common size of X and N.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     The maximum observable values in N must be positive integers,
     otherwise NaN is returned.

     ‘[...] = unidcdf (X, N, "upper")’ computes the upper tail
     probability of the discrete uniform distribution with maximum
     observable value N, at the values in X.

     Warning: The underlying implementation uses the double class and
     will only be accurate for N < ‘flintmax’ (2^{53} on IEEE 754
     compatible systems).

     Further information about the discrete uniform distribution can be
     found at
     <https://en.wikipedia.org/wiki/Discrete_uniform_distribution>

     See also: unidinv, unidpdf, unidrnd, unidfit, unidstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 56
Discrete uniform cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unidinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1023
 -- statistics: X = unidinv (P, N)

     Inverse of the discrete uniform cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the discrete uniform distribution with parameter N, which
     corresponds to the maximum observable value.  ‘unidinv’ assumes the
     integer values in the range [1,N] with equal probability.  The size
     of X is the common size of P and N.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     The maximum observable values in N must be positive integers,
     otherwise NaN is returned.

     Warning: The underlying implementation uses the double class and
     will only be accurate for N < ‘flintmax’ (2^{53} on IEEE 754
     compatible systems).

     Further information about the discrete uniform distribution can be
     found at
     <https://en.wikipedia.org/wiki/Discrete_uniform_distribution>

     See also: unidcdf, unidpdf, unidrnd, unidfit, unidstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 72
Inverse of the discrete uniform cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unidpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 999
 -- statistics: Y = unidpdf (X, N)

     Discrete uniform probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the discrete uniform distribution with parameter N, which
     corresponds to the maximum observable value.  ‘unidpdf’ assumes the
     integer values in the range [1,N] with equal probability.  The size
     of X is the common size of P and N.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     The maximum observable values in N must be positive integers,
     otherwise NaN is returned.

     Warning: The underlying implementation uses the double class and
     will only be accurate for N < ‘flintmax’ (2^{53} on IEEE 754
     compatible systems).

     Further information about the discrete uniform distribution can be
     found at
     <https://en.wikipedia.org/wiki/Discrete_uniform_distribution>

     See also: unidcdf, unidinv, unidrnd, unidfit, unidstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 52
Discrete uniform probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unidrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1495
 -- statistics: R = unidrnd (N)
 -- statistics: R = unidrnd (N, ROWS)
 -- statistics: R = unidrnd (N, ROWS, COLS, ...)
 -- statistics: R = unidrnd (N, [SZ])

     Random arrays from the discrete uniform distribution.

     ‘R = unidrnd (N)’ returns an array of random numbers chosen from
     the discrete uniform distribution with parameter N, which
     corresponds to the maximum observable value.  ‘unidrnd’ assumes the
     integer values in the range [1,N] with equal probability.  The size
     of R is the size of N.  A scalar input functions as a constant
     matrix of the same size as the other inputs.

     The maximum observable values in N must be positive integers,
     otherwise NaN is returned.

     When called with a single size argument, ‘unidrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Warning: The underlying implementation uses the double class and
     will only be accurate for N < ‘flintmax’ (2^{53} on IEEE 754
     compatible systems).

     Further information about the discrete uniform distribution can be
     found at
     <https://en.wikipedia.org/wiki/Discrete_uniform_distribution>

     See also: unidcdf, unidinv, unidrnd, unidfit, unidstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
Random arrays from the discrete uniform distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unifcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 913
 -- statistics: P = unifcdf (X, A, B)
 -- statistics: P = unifcdf (X, A, B, "upper")

     Continuous uniform cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the continuous uniform distribution with parameters A and
     B, which define the lower and upper bounds of the interval [A, B].
     The size of P is the common size of X, A, and B.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     ‘[...] = unifcdf (X, A, B, "upper")’ computes the upper tail
     probability of the continuous uniform distribution with parameters
     A, and B, at the values in X.

     Further information about the continuous uniform distribution can
     be found at
     <https://en.wikipedia.org/wiki/Continuous_uniform_distribution>

     See also: unifinv, unifpdf, unifrnd, unifit, unifstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 58
Continuous uniform cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unifinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 704
 -- statistics: X = unifinv (P, A, B)

     Inverse of the continuous uniform cumulative distribution function
     (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the continuous uniform distribution with parameters A and
     B, which define the lower and upper bounds of the interval [A, B].
     The size of X is the common size of P, A, and B.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the continuous uniform distribution can
     be found at
     <https://en.wikipedia.org/wiki/Continuous_uniform_distribution>

     See also: unifcdf, unifpdf, unifrnd, unifit, unifstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 74
Inverse of the continuous uniform cumulative distribution function
(iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unifpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 680
 -- statistics: Y = unifpdf (X, A, B)

     Continuous uniform probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the continuous uniform distribution with parameters A and
     B, which define the lower and upper bounds of the interval [A, B].
     The size of Y is the common size of X, A, and B.  A scalar input
     functions as a constant matrix of the same size as the other
     inputs.

     Further information about the continuous uniform distribution can
     be found at
     <https://en.wikipedia.org/wiki/Continuous_uniform_distribution>

     See also: unifcdf, unifinv, unifrnd, unifit, unifstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Continuous uniform probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
unifrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1193
 -- statistics: R = unifrnd (A, B)
 -- statistics: R = unifrnd (A, B, ROWS)
 -- statistics: R = unifrnd (A, B, ROWS, COLS, ...)
 -- statistics: R = unifrnd (A, B, [SZ])

     Random arrays from the continuous uniform distribution.

     ‘R = unifrnd (A, B)’ returns an array of random numbers chosen from
     the continuous uniform distribution with parameters A and B, which
     define the lower and upper bounds of the interval [A, B].  The size
     of R is the common size of A and B.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     When called with a single size argument, ‘unifrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the continuous uniform distribution can
     be found at
     <https://en.wikipedia.org/wiki/Continuous_uniform_distribution>

     See also: unifcdf, unifinv, unifpdf, unifit, unifstat.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 55
Random arrays from the continuous uniform distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
vmcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1199
 -- statistics: P = vmcdf (X, MU, K)
 -- statistics: P = vmcdf (X, MU, K, "upper")

     Von Mises probability density function (PDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the von Mises distribution with location parameter MU and
     concentration parameter K on the interval [-pi,pi].  The size of P
     is the common size of X, MU, and K.  A scalar input functions as a
     constant matrix of the same same size as the other inputs.

     ‘P = vmcdf (X, MU, K, "upper")’ computes the upper tail probability
     of the von Mises distribution with parameters MU and K, at the
     values in X.

     Note: the CDF of the von Mises distribution is not analytic.
     Hence, it is calculated by integrating its probability density
     which is expressed as a series of Bessel functions.  Balancing
     between performance and accuracy, the integration uses a step of
     1e-5 on the interval [-pi,pi], which results to an accuracy of
     about 10 significant digits.

     Further information about the von Mises distribution can be found
     at <https://en.wikipedia.org/wiki/Von_Mises_distribution>

     See also: vminv, vmpdf, vmrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Von Mises probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
vminv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 988
 -- statistics: X = vminv (P, MU, K)

     Inverse of the von Mises cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the von Mises distribution with location parameter MU and
     concentration parameter K on the interval [-pi,pi].  The size of X
     is the common size of P, MU, and K.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Note: the quantile of the von Mises distribution is not analytic.
     Hence, it is approximated by a custom searching algorithm using its
     CDF until it converges up to a tolerance of 1e-5 or 100 iterations.
     As a result, balancing between performance and accuracy, the
     accuracy is about 5e-5 for K = 1 and it drops to 5e-5 as K
     increases.

     Further information about the von Mises distribution can be found
     at <https://en.wikipedia.org/wiki/Von_Mises_distribution>

     See also: vmcdf, vmpdf, vmrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 65
Inverse of the von Mises cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
vmpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 606
 -- statistics: Y = vmpdf (X, MU, K)

     Von Mises probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the von Mises distribution with location parameter MU and
     concentration parameter K on the interval [-pi, pi].  The size of Y
     is the common size of X, MU, and K.  A scalar input functions as a
     constant matrix of the same size as the other inputs.

     Further information about the von Mises distribution can be found
     at <https://en.wikipedia.org/wiki/Von_Mises_distribution>

     See also: vmcdf, vminv, vmrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Von Mises probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
vmrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1202
 -- statistics: R = vmrnd (MU, K)
 -- statistics: R = vmrnd (MU, K, ROWS)
 -- statistics: R = vmrnd (MU, K, ROWS, COLS, ...)
 -- statistics: R = vmrnd (MU, K, [SZ])

     Random arrays from the von Mises distribution.

     ‘R = vmrnd (MU, K)’ returns an array of random angles chosen from a
     von Mises distribution with location parameter MU and concentration
     parameter K on the interval [-pi, pi].  The size of R is the common
     size of MU and K.  A scalar input functions as a constant matrix of
     the same size as the other inputs.  Both parameters must be finite
     real numbers and K > 0, otherwise NaN is returned.

     When called with a single size argument, ‘vmrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the von Mises distribution can be found
     at <https://en.wikipedia.org/wiki/Von_Mises_distribution>

     See also: vmcdf, vminv, vmpdf.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Random arrays from the von Mises distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
wblcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1558
 -- statistics: P = wblcdf (X)
 -- statistics: P = wblcdf (X, LAMBDA)
 -- statistics: P = wblcdf (X, LAMBDA, K)
 -- statistics: P = wblcdf (..., "upper")
 -- statistics: [P, PLO, PUP] = wblcdf (X, LAMBDA, K, PCOV)
 -- statistics: [P, PLO, PUP] = wblcdf (X, LAMBDA, K, PCOV, ALPHA)
 -- statistics: [P, PLO, PUP] = wblcdf (..., "upper")

     Weibull cumulative distribution function (CDF).

     For each element of X, compute the cumulative distribution function
     (CDF) of the Weibull distribution with scale parameter LAMBDA and
     shape parameter K.  The size of P is the common size of X, LAMBDA
     and K.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     Default values are LAMBDA = 1, K = 1.

     When called with three output arguments, ‘[P, PLO, PUP]’ it
     computes the confidence bounds for P when the input parameters
     LAMBDA and K are estimates.  In such case, PCOV, a 2-by-2 matrix
     containing the covariance matrix of the estimated parameters, is
     necessary.  Optionally, ALPHA has a default value of 0.05, and
     specifies 100 * (1 - ALPHA)% confidence bounds.  PLO and PUP are
     arrays of the same size as P containing the lower and upper
     confidence bounds.

     ‘[...] = wblcdf (..., "upper")’ computes the upper tail probability
     of the lognormal distribution.

     Further information about the Weibull distribution can be found at
     <https://en.wikipedia.org/wiki/Weibull_distribution>

     See also: wblinv, wblpdf, wblrnd, wblstat, wblplot.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
Weibull cumulative distribution function (CDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
wblinv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 728
 -- statistics: X = wblinv (P)
 -- statistics: X = wblinv (P, LAMBDA)
 -- statistics: X = wblinv (P, LAMBDA, K)

     Inverse of the Weibull cumulative distribution function (iCDF).

     For each element of P, compute the quantile (the inverse of the
     CDF) of the Weibull distribution with scale parameter LAMBDA and
     shape parameter K.  The size of X is the common size of P, LAMBDA,
     and K.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     Default values are LAMBDA = 1, K = 1.

     Further information about the Weibull distribution can be found at
     <https://en.wikipedia.org/wiki/Weibull_distribution>

     See also: wblcdf, wblpdf, wblrnd, wblstat, wblplot.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Inverse of the Weibull cumulative distribution function (iCDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
wblpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 730
 -- statistics: Y = wblinv (X)
 -- statistics: Y = wblinv (X, LAMBDA)
 -- statistics: Y = wblinv (X, LAMBDA, K)

     Weibull probability density function (PDF).

     For each element of X, compute the probability density function
     (PDF) of the Weibull distribution with scale parameter LAMBDA and
     shpe parameter K.  The size of Y is the common size of X, LAMBDA,
     and K.  A scalar input functions as a constant matrix of the same
     size as the other inputs.

     Default values are LAMBDA = 1, K = 1.

     Further information about the Weibull distribution can be found at
     <https://en.wikipedia.org/wiki/Weibull_distribution>

     See also: wblcdf, wblinv, wblrnd, wblfit, wbllike, wblstat,
     wblplot.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Weibull probability density function (PDF).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
wblrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1190
 -- statistics: R = wblrnd (LAMBDA, K)
 -- statistics: R = wblrnd (LAMBDA, K, ROWS)
 -- statistics: R = wblrnd (LAMBDA, K, ROWS, COLS, ...)
 -- statistics: R = wblrnd (LAMBDA, K, [SZ])

     Random arrays from the Weibull distribution.

     ‘R = wblrnd (LAMBDA, K)’ returns an array of random numbers chosen
     from the Weibull distribution with scale parameter LAMBDA and shape
     parameter K.  The size of R is the common size of LAMBDA and K.  A
     scalar input functions as a constant matrix of the same size as the
     other inputs.  Both parameters must be positive reals.

     When called with a single size argument, ‘wblrnd’ returns a square
     matrix with the dimension specified.  When called with more than
     one scalar argument, the first two arguments are taken as the
     number of rows and columns and any further arguments specify
     additional matrix dimensions.  The size may also be specified with
     a row vector of dimensions, SZ.

     Further information about the Weibull distribution can be found at
     <https://en.wikipedia.org/wiki/Weibull_distribution>

     See also: wblcdf, wblinv, wblpdf, wblfit, wbllike, wblstat,
     wblplot.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 44
Random arrays from the Weibull distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
wienrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 461
 -- statistics: R = wienrnd (T, D, N)

     Return a simulated realization of the D-dimensional Wiener Process
     on the interval [0, T].

     If D is omitted, D = 1 is used.  The first column of the return
     matrix contains time, the remaining columns contain the Wiener
     process.

     The optional parameter N defines the number of summands used for
     simulating the process over an interval of length 1.  If N is
     omitted, N = 1000 is used.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Return a simulated realization of the D-dimensional Wiener Process on
the int...



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
wishpdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 659
 -- statistics: Y = wishpdf (W, SIGMA, DF, LOG_Y=false)

     Compute the probability density function of the Wishart
     distribution

     Inputs: A P x P matrix W where to find the PDF. The P x P positive
     definite matrix SIGMA and scalar degrees of freedom parameter DF
     characterizing the Wishart distribution.  (For the density to be
     finite, need DF > (P - 1).)

     If the flag LOG_Y is set, return the log probability density – this
     helps avoid underflow when the numerical value of the density is
     very small

     Output: Y is the probability density of Wishart(SIGMA, DF) at W.

     See also: wishrnd, iwishpdf, iwishrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
Compute the probability density function of the Wishart distribution



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
wishrnd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1070
 -- statistics: [W, D] = wishrnd (SIGMA, DF, D, N=1)

     Return a random matrix sampled from the Wishart distribution with
     given parameters

     Inputs: the p x p positive definite matrix SIGMA (or the
     lower-triangular Cholesky factor D of SIGMA) and scalar degrees of
     freedom parameter DF.

     DF can be non-integer as long as DF > p

     Output: a random p x p matrix W from the Wishart(SIGMA, DF)
     distribution.  If N > 1, then W is P x P x N and holds N such
     random matrices.  (Optionally, the lower-triangular Cholesky factor
     D of SIGMA is also returned.)

     Averaged across many samples, the mean of W should approach
     DF*SIGMA, and the variance of each element W_ij should approach
     DF*(SIGMA_ij^2 + SIGMA_ii*SIGMA_jj)

     References
     ----------

       1. Yu-Cheng Ku and Peter Bloomfield (2010), Generating Random
          Wishart Matrices with Fractional Degrees of Freedom in OX,
          http://www.gwu.edu/~forcpgm/YuChengKu-030510final-WishartYu-ChengKu.pdf

     See also: wishpdf, iwishpdf, iwishrnd.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Return a random matrix sampled from the Wishart distribution with given
param...





